/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Storage/Stream/ReplayStreamHeaders.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;

namespace UltimateReplay.Storage
{
    public abstract partial class ReplayStreamStorage
    {
        protected internal class ReplayStreamHeader : IReplayStreamSerialize, IReplayTokenSerialize
        {
            // Public
            public const int replayIdentifier;
            public const int replayVersion = 120;
            /// <summary>
            /// Unique id so that we know we are working with UR3.0 files.
            /// </summary>
            [ReplayTokenSerialize("File Identifier")]
            public int fileIdentifier;
            /// <summary>
            /// The current version of this replay file format
            /// </summary>
            [ReplayTokenSerialize("Version")]
            public int version;
            /// <summary>
            /// The size in bytes required to store a replay identity value. Can be 2 or 4 bytes.
            /// </summary>
            [ReplayTokenSerialize("Identity Byte Size")]
            public ushort identityByteSize;
            /// <summary>
            /// The amount of size in uncompressed bytes that the replay takes up.
            /// </summary>
            public int memorySize;
            /// <summary>
            /// The duration of the replay in seconds.
            /// </summary>
            public float duration;
            /// <summary>
            /// The number of snapshots in the replay.
            /// </summary>
            public int snapshotCount;
            /// <summary>
            /// The stream offset to the segment table. Segment table can map timestamps and sequence Ids to file offsets for replay segments.
            /// </summary>
            public int segmentTableOffset;
            /// <summary>
            /// The stream offset to the persistent data.
            /// </summary>
            public int persistentDataOffset;
            /// <summary>
            /// The stream offset to the metadata.
            /// </summary>
            public int metadataOffset;
            // Properties
            [ReplayTokenSerialize("Memory Size")]
            public string MemorySizeFixedLengthString
            {
                get
                {
                    return HexConverter.ToHexString(memorySize);
                }

                set
                {
                    memorySize = HexConverter.FromHexStringInt32(value);
                }
            }

            [ReplayTokenSerialize("Duration")]
            public string DurationFixedLengthString
            {
                get
                {
                    return HexConverter.ToHexString(duration);
                }

                set
                {
                    duration = HexConverter.FromHexStringSingle(value);
                }
            }

            [ReplayTokenSerialize("Snapshot Count")]
            public string SnapshotCountFixedLengthString
            {
                get
                {
                    return HexConverter.ToHexString(snapshotCount);
                }

                set
                {
                    snapshotCount = HexConverter.FromHexStringInt32(value);
                }
            }

            [ReplayTokenSerialize("Segment Table Offset")]
            public string SegmentTableOffsetFixedLengthString
            {
                get
                {
                    return HexConverter.ToHexString(segmentTableOffset);
                }

                set
                {
                    segmentTableOffset = HexConverter.FromHexStringInt32(value);
                }
            }

            [ReplayTokenSerialize("Persistent Data Offset")]
            public string PersistentDataOffsetString
            {
                get
                {
                    return HexConverter.ToHexString(persistentDataOffset);
                }

                set
                {
                    persistentDataOffset = HexConverter.FromHexStringInt32(value);
                }
            }

            [ReplayTokenSerialize("Metadata Offset")]
            public string MetadataOffsetFixedLengthString
            {
                get
                {
                    return HexConverter.ToHexString(metadataOffset);
                }

                set
                {
                    metadataOffset = HexConverter.FromHexStringInt32(value);
                }
            }
        }

        protected struct ReplaySegmentEntry : IReplayTokenSerialize
        {
            // Public
            /// <summary>
            /// The unique id of this replay segment.
            /// </summary>
            [ReplayTokenSerialize("Segment ID")]
            public int segmentId;
            /// <summary>
            /// The sequence id of the replay snapshot that is the first entry of this segment.
            /// </summary>
            [ReplayTokenSerialize("Start Sequence ID")]
            public int startSequenceId;
            /// <summary>
            /// The sequence id of the replay snapshot that is the last entry of this segment.
            /// </summary>
            [ReplayTokenSerialize("End Sequence ID")]
            public int endSequenceId;
            /// <summary>
            /// The timestamp of the replay snapshot that is the first entry of this segment.
            /// </summary>
            [ReplayTokenSerialize("Start Time")]
            public float startTimeStamp;
            /// <summary>
            /// The timestamp of the replay snapshot that is the last entry of this segment.
            /// </summary>
            [ReplayTokenSerialize("End Time")]
            public float endTimeStamp;
            /// <summary>
            /// The offset from the start of the stream data where the replay segment is located.
            /// </summary>
            [ReplayTokenSerialize("Stream Offset")]
            public int streamOffset;
        }

        protected class ReplaySegmentTable : IReplayStreamSerialize, IReplayTokenSerialize
        {
            public void AddSegment(ReplaySegmentEntry segment) => throw new System.NotImplementedException();
            public int GetSegmentDataOffset(int segmentId) => throw new System.NotImplementedException();
            public int GetSegmentId(int sequenceId) => throw new System.NotImplementedException();
            public int GetSegmentId(float timestamp, float duration) => throw new System.NotImplementedException();
        }
    }
}