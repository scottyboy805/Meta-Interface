/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Common/ReplayIdentity.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using UltimateReplay.Storage;
using UnityEngine;

namespace UltimateReplay
{
    /// <summary>
    /// A replay identity is an essential component in the Ultimate Replay system and is used to identify replay objects between sessions.
    /// Replay identities are assigned at edit time where possible and will never change values.
    /// Replay identities are also use to identify prefab instances that are spawned during a replay.
    /// </summary>
    [Serializable]
    public struct ReplayIdentity : IEquatable<ReplayIdentity>, IReplaySerialize, IReplayStreamSerialize
    {
        // Public
        public static readonly ReplayIdentity invalid;
        /// <summary>
        /// Get the number of bytes that this object uses to represent its id data.
        /// </summary>
        
#if ULTIMATEREPLAY_REPLAYIDENTITY_32BIT
        public static readonly int byteSize = sizeof(uint);
        public static readonly int maxValue = uint.MaxValue;
#else
        public static readonly int byteSize;
        public static readonly int maxValue;
#endif
        // Properties
        /// <summary>
        /// Returns true if this id is not equal to <see cref = "unassignedID"/>. 
        /// </summary>
        public bool IsValid
        {
            get
            {
                return id != unassignedID;
            }
        }

        public int ID
        {
            get
            {
                return (int)id;
            }
        }

        // Constructor
        /// <summary>
        /// Clear any old data on domain reload.
        /// </summary>
        static ReplayIdentity()
        {
            // Clear the set - it will be repopulated when each identity is initialized
            usedIds.Clear();
        }

        /// <summary>
        /// Create a new instance with the specified id value.
        /// </summary>
        /// <param name = "id">The id value to give this identity</param>
        public ReplayIdentity(uint id)
        {
            this.id = id;
            // Check for out of bounds
            if (id > maxValue)
                throw new InvalidOperationException("Id value `" + id + "` exceeds the maximum allowed value: " + maxValue);
        }

        public ReplayIdentity(ReplayIdentity other)
        {
            this.id = other.id;
        }

        // Methods
        /// <summary>
        /// Override implementation.
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode() => throw new System.NotImplementedException();
        /// <summary>
        /// Override implementation.
        /// </summary>
        /// <param name = "obj">The object to compare against</param>
        /// <returns></returns>
        public override bool Equals(object obj) => throw new System.NotImplementedException();
        /// <summary>
        /// IEquateable implementation.
        /// </summary>
        /// <param name = "obj">The <see cref = "ReplayIdentity"/> to compare against</param>
        /// <returns></returns>
        public bool Equals(ReplayIdentity obj) => throw new System.NotImplementedException();
        /// <summary>
        /// Override implementation.
        /// </summary>
        /// <returns></returns>
        public override string ToString() => throw new System.NotImplementedException();
        /// <summary>
        /// Override equals operator.
        /// </summary>
        /// <param name = "a">First <see cref = "ReplayIdentity"/></param>
        /// <param name = "b">Second <see cref = "ReplayIdentity"/></param>
        /// <returns></returns>
        public static bool operator ==(ReplayIdentity a, ReplayIdentity b)
        {
            return a.Equals(b) == true;
        }

        /// <summary>
        /// Override not-equals operator.
        /// </summary>
        /// <param name = "a">First <see cref = "ReplayIdentity"/></param>
        /// <param name = "b">Second <see cref = "ReplayIdentity"/></param>
        /// <returns></returns>
        public static bool operator !=(ReplayIdentity a, ReplayIdentity b)
        {
            // Check for not equal
            return a.Equals(b) == false;
        }

        public static void RegisterIdentity(ReplayIdentity identity) => throw new System.NotImplementedException();
        public static void UnregisterIdentity(ReplayIdentity identity) => throw new System.NotImplementedException();
        public static bool IsIdentityUnique(in ReplayIdentity identity) => throw new System.NotImplementedException();
    }
}