/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Common/ComponentData/ReplayVariableData.cs
/// </summary>
using System.Collections.Generic;
using UltimateReplay.Storage;

namespace UltimateReplay.ComponentData
{
    /// <summary>
    /// Contains all necessary data to serialize a replay variable with its value.
    /// </summary>
    public struct ReplayVariableData : IReplaySerialize, IReplayTokenSerialize
    {
        // Properties
        /// <summary>
        /// The <see cref = "ReplayIdentity"/> of the <see cref = "ReplayBehaviour"/> that the variable belongs to.
        /// </summary>
        public ReplayIdentity BehaviourIdentity
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// The field offset used to uniquely identify the variable.
        /// </summary>
        public int VariableFieldOffset
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// The <see cref = "ReplayState"/> containing the variable value.
        /// </summary>
        public ReplayState VariableStateData
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        /// <summary>
        /// Create a new variable data instance.
        /// </summary>
        /// <param name = "behaviourIdentity">The <see cref = "ReplayIdentity"/> of the owning behaviour</param>
        /// <param name = "variable">The <see cref = "ReplayVariable"/> instance</param>
        public ReplayVariableData(ReplayIdentity behaviourIdentity, ReplayVariable variable) => throw new System.NotImplementedException();
        // Methods
        IEnumerable<ReplayToken> IReplayTokenSerialize.GetSerializeTokens(bool includeOptional) => throw new System.NotImplementedException();
        /// <summary>
        /// Serialize the variable data to the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to write to</param>
        public void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Deserialize the variable data from the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to read from</param>
        public void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to resolve and deserialize the variable data for the specified <see cref = "ReplayObject"/>.
        /// This will attempt to find the target variable on one of the observed components and will deserialize and update that variable if found.
        /// </summary>
        /// <param name = "tagretObject">The <see cref = "ReplayObject"/> to try and resolve</param>
        /// <returns>True if the variable was found and updated or false if not</returns>
        public bool ResolveAndDeserializeVariable(ReplayObject tagretObject) => throw new System.NotImplementedException();
        /// <summary>
        /// Returns a value indicating whther the specified <see cref = "ReplayVariable"/> corrosponds to this variable data.
        /// </summary>
        /// <param name = "variable">The <see cref = "ReplayVariable"/> instance to check</param>
        /// <returns>True if the variable data targets the specified variable instance or false if not</returns>
        public bool IsMatchedToVariable(ReplayVariable variable) => throw new System.NotImplementedException();
    }
}