/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Common/ComponentData/ReplayComponentData.cs
/// </summary>
using System;
using System.Collections.Generic;
using UltimateReplay.Formatters;
using UltimateReplay.Storage;

namespace UltimateReplay.ComponentData
{
    /// <summary>
    /// Contains all serialized data relating to a specific recorder component.
    /// </summary>
    public struct ReplayComponentData : IReplaySerialize, IReplayTokenSerialize, IDisposable
    {
        // Properties
        /// <summary>
        /// The <see cref = "ReplayIdentity"/> of the behaviour script that the data belongs to.
        /// </summary>
        public ReplayIdentity BehaviourIdentity
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// An id value used to identify the corresponding serializer or '-1' if a serializer id could not be generated.
        /// </summary>
        public int ComponentSerializerID
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// The <see cref = "ReplayState"/> containing all data that was serialized by the component.
        /// </summary>
        public ReplayState ComponentStateData
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        /// <summary>
        /// Create a new instance.
        /// </summary>
        /// <param name = "behaviourIdentity">The identity of the behaviour component</param>
        /// <param name = "componentSerializerID">The id of the component serializer</param>
        /// <param name = "componentStateData">The data associated with the component</param>
        public ReplayComponentData(ReplayIdentity behaviourIdentity, int componentSerializerID, ReplayState componentStateData) => throw new System.NotImplementedException();
        // Methods
        IEnumerable<ReplayToken> IReplayTokenSerialize.GetSerializeTokens(bool includeOptional) => throw new System.NotImplementedException();
        /// <summary>
        /// Release the component data.
        /// </summary>
        public void Dispose() => throw new System.NotImplementedException();
        /// <summary>
        /// Serialize the component data to the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to write to</param>
        public void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Deserialize the component data from the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to read from</param>
        public void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to resolve the type of the corresponding formatter type.
        /// </summary>
        /// <returns>The type of the matching serialize or null if the type could not be resolved</returns>
        public Type ResolveFormatterType() => throw new System.NotImplementedException();
        public ReplayFormatter GetFormatter() => throw new System.NotImplementedException();
        public T GetFormatter<T>()
            where T : ReplayFormatter => throw new System.NotImplementedException();
        public ReplayFormatter CreateFormatter() => throw new System.NotImplementedException();
        public T CreateFormatter<T>()
            where T : ReplayFormatter => throw new System.NotImplementedException();
        /// <summary>
        /// Deserialize the component data onto the specified component serializer instance.
        /// The specified serialize must be the correct type or have the correct serializer id.
        /// </summary>
        /// <param name = "componentSerializer">An <see cref = "IReplaySerialize"/> implementation that should be a correct typed serializer</param>
        /// <returns>True if the deserialize was successful or false if not</returns>
        public bool DeserializeComponent(IReplaySerialize componentSerializer) => throw new System.NotImplementedException();
    }
}