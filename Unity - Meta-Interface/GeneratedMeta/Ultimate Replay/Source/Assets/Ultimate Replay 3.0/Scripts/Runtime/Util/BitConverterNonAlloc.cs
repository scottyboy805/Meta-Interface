/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Util/BitConverterNonAlloc.cs
/// </summary>
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace UltimateReplay.Util
{
    /// <summary>
    /// Custom implementation of the BitConverter class that does not make any allocations.
    /// This is important as the methods may be called thousands of times per second.
    /// </summary>
    public static class BitConverterNonAlloc
    {
        // Methods
        /// <summary>
        /// Store a 16 bit int into the specified byte array.
        /// <param name = "buffer">The buffer to store the int which must have a size of 2 or greater</param>
        /// <param name = "value">The short value to store</param>
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, short value) => throw new System.NotImplementedException();
        /// <summary>
        /// Store a 32-bit int into the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to store the int which must have a size of 4 or greater</param>
        /// <param name = "value">The int value to store</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, int value) => throw new System.NotImplementedException();
        /// <summary>
        /// Store a 64-bit int into the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to store the int which must have a size of 8 or greater</param>
        /// <param name = "value">The int value to store</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, long value) => throw new System.NotImplementedException();
        /// <summary>
        /// Store a 32-bit float into the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to store the float which must have a size of 4 or greated</param>
        /// <param name = "value">The float value to store</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, float value) => throw new System.NotImplementedException();
        /// <summary>
        /// Store a 64-bit decimal value into the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to store the value which must have a size of 8 or greater</param>
        /// <param name = "value">The value to store</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, double value) => throw new System.NotImplementedException();
        /// <summary>
        /// Store an 8-bit bool into the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to store the bool which must have a size of 1 or greater</param>
        /// <param name = "value">The bool value to store</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void GetBytes(byte[] buffer, int offset, bool value) => throw new System.NotImplementedException();
        /// <summary>
        /// Retrieve a 16-bit int from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the short from which must have a size of 2 or greater</param>
        /// <returns>The unpacked short value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static short GetInt16(byte[] buffer, int offset) => throw new System.NotImplementedException();
        /// <summary>
        /// Retrieve a 32-bit int from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the int from which must have a size of 4 or greater</param>
        /// <returns>The unpacked int value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int GetInt32(byte[] buffer, int offset) => throw new System.NotImplementedException();
        /// <summary>
        /// Retrieve a 64-bit int from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the int from which must have a size of 8 or greater</param>
        /// <returns>The unpacked long int value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static long GetInt64(byte[] buffer, int offset) => throw new System.NotImplementedException();
        /// <summary>
        /// Retrieve a 32-bit float from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the float from which must have a size of 4 or greater</param>
        /// <returns>The unpacked float value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static float GetFloat(byte[] buffer, int offset) => throw new System.NotImplementedException();
        /// <summary>
        /// Get a 64-bit decimal value from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the data from which must have a size of 8 or greater</param>
        /// <returns>The unpacked double value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static double GetDouble(byte[] buffer, int offset) => throw new System.NotImplementedException();
        /// <summary>
        /// Retrieve a 8-bit bool from the specified byte array.
        /// </summary>
        /// <param name = "buffer">The buffer to retrieve the bool from which must have a size of 1 or greater</param>
        /// <returns>The unpacked bool value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool GetBool(byte[] buffer, int offset) => throw new System.NotImplementedException();
    }
}