/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Common/ComponentData/ReplayVariable.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.Reflection;
using UnityEngine;

namespace UltimateReplay.ComponentData
{
    /// <summary>
    /// Represents a variable that can be recorded using the replay system in order to replay script animations or similar during playback.
    /// </summary>
    public sealed class ReplayVariable : IReplaySerialize
    {
        // Properties
        /// <summary>
        /// Get the game object that this <see cref = "ReplayVariable"/> is attached to. 
        /// </summary>
        public GameObject gameObject
        {
            get
            {
                return owner.gameObject;
            }
        }

        /// <summary>
        /// Get the <see cref = "ReplayBehaviour"/> that this variable belongs to.
        /// </summary>
        public ReplayBehaviour Behaviour
        {
            get
            {
                return owner;
            }
        }

        /// <summary>
        /// Get the managed field offset value to uniquely identify the variable.
        /// </summary>
        public int FieldOffset
        {
            get
            {
                if (cachedOffset == -1)
                {
                    FieldInfo[] fields = field.DeclaringType.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy);
                    cachedOffset = Array.IndexOf(fields, field);
                }

                return cachedOffset;
            //return Marshal.ReadInt32(field.FieldHandle.Value); 
            }
        }

        /// <summary>
        /// The current value for this <see cref = "ReplayVariable"/>. 
        /// </summary>
        public object Value
        {
            get
            {
                return field.GetValue(owner);
            }

            set
            {
                field.SetValue(owner, value);
            }
        }

        /// <summary>
        /// Get the <see cref = "ReplayVarAttribute"/> associated with this <see cref = "ReplayVariable"/>.  
        /// </summary>
        public ReplayVarAttribute Attribute
        {
            get
            {
                return attribute;
            }
        }

        /// <summary>
        /// Get the name of this <see cref = "ReplayVariable"/>. 
        /// </summary>
        public string Name
        {
            get
            {
                return field.Name;
            }
        }

        /// <summary>
        /// Returns true if this <see cref = "ReplayVariable"/> should be interpolated between frames. 
        /// </summary>
        public bool IsInterpolated
        {
            get
            {
                return attribute.interpolate;
            }
        }

        /// <summary>
        /// Returns true if this <see cref = "ReplayVariable"/> supports interpolation. 
        /// Interpolation can only be supported if the variable type has a registered interpolator.
        /// </summary>
        public bool IsInterpolationSupported
        {
            get
            {
                return isInterpolationSupported;
            }
        }

        // Constructor
        /// <summary>
        /// Create a new <see cref = "ReplayVariable"/>. 
        /// </summary>
        /// <param name = "owner">The <see cref = "ReplayBehaviour"/> that this <see cref = "ReplayVariable"/> is defined in</param>
        /// <param name = "field">The field info for the variable field</param>
        /// <param name = "attribute">The <see cref = "ReplayVarAttribute"/> for the field</param>
        public ReplayVariable(ReplayBehaviour owner, FieldInfo field, ReplayVarAttribute attribute)
        {
            this.owner = owner;
            this.field = field;
            this.attribute = attribute;
            // Check if interpolation is supported
            this.isInterpolationSupported = CanInterpolate(field.FieldType);
            this.serializeMethod = ReplayState.GetSerializeMethod(field.FieldType);
            this.deserializeMethod = ReplayState.GetDeserializeMethod(field.FieldType);
            if (serializeMethod == null || deserializeMethod == null)
                throw new NotSupportedException("The replay variable references a field which has a type that cannot be serialized");
        }

        // Methods
        /// <summary>
        /// Called by the replay system when the variable should be serialized.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to serialize the data into</param>
        public void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the variable should be deserialized.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to deserialize the data from</param>
        public void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Sets the current interpolation range for the <see cref = "ReplayVariable"/> value. 
        /// </summary>
        /// <param name = "last">The value of the variable in the last frame</param>
        /// <param name = "next">The value of the variable in the next frame</param>
        public void UpdateValueRange(object last, object next) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to interpolate the <see cref = "ReplayVariable"/> value using the values from the last and next frame. 
        /// </summary>
        /// <param name = "delta">The normalized delta representing the progression from the last frame to the next frame</param>
        public void Interpolate(float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to interpolate the <see cref = "ReplayVariable"/> value using the values from the last and next frame. 
        /// In order for interpolation to succeed, the last and next values must be of the same type.
        /// </summary>
        /// <param name = "last">The value of the variable in the last frame</param>
        /// <param name = "next">The value of the variable in the next frame</param>
        /// <param name = "delta">The normalized delta representing the progression from the last frame to the next frame</param>
        /// <returns>The interpolated value result or null if interpolation is not supported for the type</returns>
        public static object InterpolateValue(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Returns true if the specified type can be interpolated by the replay system.
        /// </summary>
        /// <param name = "type">The system type to check for interpolation support</param>
        /// <returns>True if interpolation is supported or faluse if it is not</returns>
        public static bool CanInterpolate(Type type) => throw new System.NotImplementedException();
        /// <summary>
        /// Allows a custom interpolation method to be registered so that unsupported variable types can be interpolated automatically.
        /// </summary>
        /// <typeparam name = "T">The type of varaible that the custom interpolation should be used for</typeparam>
        /// <param name = "interpolatorFunc">The interpolation method to invoke when interpolation of the custom type is required</param>
        public static void RegisterCustomInterpolator<T>(Func<object, object, float, object> interpolatorFunc) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for byte.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated byte value</returns>
        public static object InterpolateByte(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for short.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated short value</returns>
        public static object InterpolateShort(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for int.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated int value</returns>
        public static object InterpolateInt(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for long.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated long value</returns>
        public static object InterpolateLong(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for float.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated float value</returns>
        public static object InterpolateFloat(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for double.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated double value</returns>
        public static object InterpolateDouble(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Vector2.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Vector2 value</returns>
        public static object InterpolateVec2(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Vector3.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Vector3 value</returns>
        public static object InterpolateVec3(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Vector4.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Vector4 value</returns>
        public static object InterpolateVec4(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Quaternion.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Quaternion value</returns>
        public static object InterpolateQuat(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Color.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Color value</returns>
        public static object InterpolateColor(object last, object next, float delta) => throw new System.NotImplementedException();
        /// <summary>
        /// Default interpolator for Color32.
        /// </summary>
        /// <param name = "last">Last value</param>
        /// <param name = "next">Next value</param>
        /// <param name = "delta">Interpolation delta</param>
        /// <returns>The interpolated Color32 value</returns>
        public static object InterpolateColor32(object last, object next, float delta) => throw new System.NotImplementedException();
    }
}