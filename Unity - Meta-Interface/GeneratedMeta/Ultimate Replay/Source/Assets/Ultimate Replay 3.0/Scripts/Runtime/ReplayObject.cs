/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayObject.cs
/// </summary>
using System.Collections.Generic;
using UnityEngine;
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using UltimateReplay.Formatters;
using UltimateReplay.Lifecycle;
using UltimateReplay.ComponentData;

#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.SceneManagement;
#endif
[assembly: InternalsVisibleTo("Assembly-CSharp-Editor")]
[assembly: InternalsVisibleTo("Assembly-CSharp-Editor-firstpass")]
[assembly: InternalsVisibleTo("UltimateReplay-Editor")]
namespace UltimateReplay
{
    public enum IDAssignMode
    {
        KeepIdentity,
        NewIdentity,
    }

    /// <summary>
    /// Only one instance of <see cref = "ReplayObject"/> can be added to any game object. 
    /// </summary>
    [ExecuteInEditMode]
    [DisallowMultipleComponent]
    [DefaultExecutionOrder(-100)]
    public sealed class ReplayObject : MonoBehaviour, IReplaySerialize, ISerializationCallbackReceiver
    {
        [Serializable]
        public struct ReplayObjectReference
        {
            // Public
            public ReplayObject reference;
            // Constructor
            public ReplayObjectReference(ReplayObject obj) => throw new System.NotImplementedException();
        }

        // Internal
#if UNITY_EDITOR || ULTIMATEREPLAY_TRIAL // Must be active in trail version as it is built as a dll

        internal bool isObservedComponentsExpanded = false;
#endif
        // Private        
        private static readonly ReplayObjectFormatter formatter;
        // Properties
        /// <summary>
        /// Get all registered replay objects that exist in all loaded scenes.
        /// </summary>
        public static HashSet<ReplayObject> AllReplayObjects
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the unique <see cref = "ReplayIdentity"/> for this <see cref = "ReplayObject"/>.  
        /// </summary>
        public ReplayIdentity ReplayIdentity
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the unique prefab <see cref = "ReplayIdentity"/> for this <see cref = "ReplayObject"/> which links to the associated replay prefab.
        /// </summary>
        public ReplayIdentity PrefabIdentity
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the <see cref = "ReplayObjectLifecycleProvider"/> responsible for the creation and destruction of this replay object.
        /// </summary>
        public ReplayObjectLifecycleProvider LifecycleProvider
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns true when this game object is a prefab asset.
        /// Returns false when this game object is a scene object or prefab instance.
        /// </summary>
        public bool IsPrefab
        {
            get => throw new System.NotImplementedException();
        }

        public bool IsPrefabAsset
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in an active replay operation.
        /// This value will be false if the replay is paused. <see cref = "IsPlaybackPaused"/> to check if the replay has been paused, or <see cref = "IsReplayingOrPaused"/> to get an inclusive value.
        /// </summary>
        public bool IsReplaying
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in an active or paused replay operation.
        /// </summary>
        public bool IsReplayingOrPaused
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in a playback operation that is currently paused.
        /// </summary>
        public bool IsPlaybackPaused
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in an active record operation.
        /// This value will be false if recording is paused. <see cref = "IsRecordingPaused"/> to check if the recording has been paused, or <see cref = "IsReplayingOrPaused"/> to get an inclusive value.
        /// </summary>
        public bool IsRecording
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in any record operation that is currently paused.
        /// </summary>
        public bool IsRecordingPaused
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether this replay object is included in an active or paused record operation.
        /// </summary>
        public bool IsRecordingOrPaused
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the current playback operation for this replay object if it is currently part of a replay.
        /// It is only possible for any given replay object to be associated with a single playback operation at any time, although an object can be recorded multiple times.
        /// </summary>
        public ReplayPlaybackOperation PlaybackOperation
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all record operations that this replay object is currently associated with.
        /// It is possible for any given replay object to be recorded by multiple difference record operations simultaneously.
        /// </summary>
        public IReadOnlyList<ReplayRecordOperation> RecordOperations
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all replay components that are observed and managed by this replay object.
        /// </summary>
        public IReadOnlyList<ReplayBehaviour> ObservedComponents
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all replay behaviours managed by this replay object.
        /// </summary>
        public IReadOnlyList<ReplayBehaviour> Behaviours
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Called by Unity editor.
        /// Can also be called by scripts to force update the component.
        /// </summary>
        public void Reset() => throw new System.NotImplementedException();
        public void OnValidate() => throw new System.NotImplementedException();
        public void UpdateRuntimeComponents(bool forceUpdate = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Force the <see cref = "ReplayIdentity"/> to be regenerated with a unique value.
        /// </summary>
        public void ForceRegenerateIdentity() => throw new System.NotImplementedException();
        /// <summary>
        /// Force the <see cref = "ReplayIdentity"/> and all observed component id's to be regenerated with unique values.
        /// </summary>
        public void ForceRegenerateIdentityWithObservedComponents() => throw new System.NotImplementedException();
        void ISerializationCallbackReceiver.OnBeforeSerialize() => throw new System.NotImplementedException();
        void ISerializationCallbackReceiver.OnAfterDeserialize() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when this <see cref = "ReplayObject"/> should serialize its replay data. 
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to serialize the data to</param>
        public void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when this <see cref = "ReplayObject"/> should deserialize its replay data. 
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to deserialize the data to</param>
        public void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when this <see cref = "ReplayObject"/> should deserialize its replay data. 
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to deserialize the data from</param>
        /// <param name = "simulate">True if replay components should be simulated</param>
        public void OnReplayDeserialize(ReplayState state, bool simulate, bool ignoreUpdate) => throw new System.NotImplementedException();
        public void RecordReplayVariable(ReplayIdentity senderIdentity, ReplayVariable replayVariable) => throw new System.NotImplementedException();
        public void RecordReplayEvent(ReplayIdentity senderIdentity, ushort eventID, ReplayState eventData = null) => throw new System.NotImplementedException();
        public void Call(ReplayIdentity senderIdentity, Action method) => throw new System.NotImplementedException();
        public void Call<T>(ReplayIdentity senderIdentity, Action<T> method, T arg) => throw new System.NotImplementedException();
        public void Call<T0, T1>(ReplayIdentity senderIdentity, Action<T0, T1> method, T0 arg0, T1 arg1) => throw new System.NotImplementedException();
        public void Call<T0, T1, T2>(ReplayIdentity senderIdentity, Action<T0, T1, T2> method, T0 arg0, T1 arg1, T2 arg2) => throw new System.NotImplementedException();
        public void Call<T0, T1, T2, T3>(ReplayIdentity senderIdentity, Action<T0, T1, T2, T3> method, T0 arg0, T1 arg1, T2 arg2, T3 arg3) => throw new System.NotImplementedException();
        /// <summary>
        /// Returns a value indicating whether the specified recorder component is observed by this <see cref = "ReplayObject"/>.
        /// </summary>
        /// <param name = "component">The recorder component to check</param>
        /// <returns>True if the component is observed or false if not</returns>
        public bool IsComponentObserved(ReplayBehaviour component) => throw new System.NotImplementedException();
        /// <summary>
        /// Forces the object to refresh its list of observed components.
        /// Observed components are components which inherit from <see cref = "ReplayBehaviour"/> and exist on either this game object or a child of this game object. 
        /// </summary>
        [ContextMenu("Ultimate Replay/Update Replay Components")]
        public void RebuildComponentList() => throw new System.NotImplementedException();
        /// <summary>
        /// Returns a value indicating whether the observed component list is valid or needs o be rebuilt.
        /// </summary>
        /// <returns>True if the collection is valid or false if not</returns>
        public bool CheckComponentListIntegrity() => throw new System.NotImplementedException();
        /// <summary>
        /// Get the <see cref = "ReplayBehaviour"/> observed by this <see cref = "ReplayObject"/> with the specified <see cref = "ReplayIdentity"/>.
        /// </summary>
        /// <param name = "replayIdentity"></param>
        /// <returns></returns>
        public ReplayBehaviour GetReplayBehaviour(ReplayIdentity replayIdentity) => throw new System.NotImplementedException();
        public static bool CloneReplayObjectIdentity(GameObject cloneFromObject, GameObject cloneToObject) => throw new System.NotImplementedException();
        public static bool CloneReplayObjectIdentity(ReplayObject cloneFromObject, ReplayObject cloneToObject) => throw new System.NotImplementedException();
    }
}