/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayMetadata.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using UltimateReplay.Storage;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace UltimateReplay
{
    /// <summary>
    /// Stores all additional non-essential information about a replay.
    /// Can be useful to help display information about the replay such as when it was created, or which Unity scene is required for best playback accuracy.
    /// You can also derive from this class to add additional custom metadata fields that you would like to save.
    /// Note that only primitive types and arrays will be serialized and only reference types that are marked as <see cref = "SerializableAttribute"/> will be saved (Serialization follows standard Unity practices but does not support reference types unless marked as serializable).
    /// </summary>
    [Serializable]
    public class ReplayMetadata : IReplayStreamSerialize, IReplayTokenSerialize
    {
        // Properties
        /// <summary>
        /// Get serializable type name of this metadata type.
        /// </summary>
        public string TypeName
        {
            get
            {
                return GetType().AssemblyQualifiedName;
            }
        }

        /// <summary>
        /// A name for the replay to help identify it.
        /// </summary>
        public string ReplayName
        {
            get
            {
                return replayName;
            }

            set
            {
                replayName = value;
            }
        }

        /// <summary>
        /// The id of the Unity scene that was active when the replay was recorded.
        /// Use <see cref = "UpdateSceneMetadata(Scene)"/> to modify this value.
        /// </summary>
        public int SceneId
        {
            get
            {
                return sceneId;
            }
        }

        /// <summary>
        /// The name of the Unity scene that was active when the replay was recorded.
        /// Use <see cref = "UpdateSceneMetadata(Scene)"/> to modify this value.
        /// </summary>
        public string SceneName
        {
            get
            {
                return sceneName;
            }
        }

        /// <summary>
        /// The path of the Unity scene that was active when the replay was recorded.
        /// Use <see cref = "UpdateSceneMetadata(Scene)"/> to modify this value.
        /// </summary>
        public string ScenePath
        {
            get
            {
                return scenePath;
            }
        }

        /// <summary>
        /// Get the name of the app that created this replay.
        /// By default this will use the value of <see cref = "Application.productName"/>.
        /// </summary>
        public string AppName
        {
            get
            {
                return appName;
            }

            set
            {
                appName = value;
            }
        }

        /// <summary>
        /// Get the name of the app developer that created this replay.
        /// By default this will use the value of <see cref = "Application.companyName"/>.
        /// </summary>
        public string DeveloperName
        {
            get
            {
                return developerName;
            }

            set
            {
                developerName = value;
            }
        }

        /// <summary>
        /// Get the name of the user that created this replay.
        /// By default this will use the value of <see cref = "Environment.UserName"/>.
        /// </summary>
        public string UserName
        {
            get
            {
                return userName;
            }

            set
            {
                userName = value;
            }
        }

        // Constructor
        /// <summary>
        /// Create a new instance.
        /// </summary>
        public ReplayMetadata()
        {
        }

        /// <summary>
        /// Create a new instance with the specified metadata replay name.
        /// </summary>
        /// <param name = "replayName">The name of the replay</param>
        public ReplayMetadata(string replayName = null)
        {
            // Check for empty
            if (string.IsNullOrEmpty(replayName) == true)
                replayName = "Untitled";
            this.replayName = replayName;
        }

        /// <summary>
        /// Update all metadata from default sources.
        /// Scene information will be updated from <see cref = "SceneManager.GetActiveScene"/> and company and product info will be updated based on Unity player settings.
        /// </summary>
        public void UpdateMetadata() => throw new System.NotImplementedException();
        /// <summary>
        /// Update all metadata related to scene info from the specified scene.
        /// </summary>
        /// <param name = "scene">The Unity scene to store metadata for</param>
        public void UpdateSceneMetadata(Scene scene) => throw new System.NotImplementedException();
        /// <summary>
        /// Copy the current metadata to the specified metadata object.
        /// </summary>
        /// <param name = "destination"></param>
        /// <returns>True if the copy was successful or false if not</returns>
        /// <exception cref = "ArgumentNullException"></exception>
        public bool CopyTo(ReplayMetadata destination) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a <see cref = "ReplayMetadata"/> instance from the specified type name.
        /// The type name must be a valid <see cref = "ReplayMetadata"/> type or derived type.
        /// </summary>
        /// <param name = "typeName">The type name</param>
        /// <returns></returns>
        public static ReplayMetadata CreateFromType(string typeName) => throw new System.NotImplementedException();
    }
}