/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayPlaybackOptions.cs
/// </summary>
using System;
using UnityEngine;

namespace UltimateReplay
{
    /// <summary>
    /// A number of options used to control the playback behaviour.
    /// </summary>
    [Serializable]
    public class ReplayPlaybackOptions : ISerializationCallbackReceiver
    {
        // Properties
        /// <summary>
        /// When should happen when the replay reaches the end of its playback.
        /// </summary>
        public PlaybackEndBehaviour PlaybackEndBehaviour
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        /// <summary>
        /// The target playback frame rate.
        /// Use '-1' to set the playback fps to unlimited which will update every game tick.
        /// Playback updates can run more frequently than the record rate but interpolation can blend key frames to create smooth replays.
        /// </summary>
        public float PlaybackFPS
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether the playback fps is unlimited. Ie: set to '-1'.
        /// </summary>
        public bool IsPlaybackFPSUnlimited
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// The update method used to update the playback operation.
        /// Used for compatibility with other systems that update objects in other update methods such as LateUpdate.
        /// </summary>
        public ReplayUpdateMode PlaybackUpdateMode
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        // Constructor
        /// <summary>
        /// Create a new playback options instance with default settings.
        /// </summary>
        public ReplayPlaybackOptions() => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new playback options instance with the specified end behaviour and frame rate.
        /// </summary>
        /// <param name = "endBehaviour">The end behaviour which indicates what should happen when the end of the replay is reached</param>
        /// <param name = "playbackFPS">The target playback frate rate or '-1' for unlimited frame rate</param>
        public ReplayPlaybackOptions(PlaybackEndBehaviour endBehaviour, int playbackFPS = -1) => throw new System.NotImplementedException();
        void ISerializationCallbackReceiver.OnBeforeSerialize() => throw new System.NotImplementedException();
        void ISerializationCallbackReceiver.OnAfterDeserialize() => throw new System.NotImplementedException();
    }
}