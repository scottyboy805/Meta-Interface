/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplaySettings.cs
/// </summary>
using System;
using System.Collections.Generic;
using UnityEngine;
using UltimateReplay.Lifecycle;
using UltimateReplay.StatePreparation;

#if UNITY_EDITOR
using UnityEditor;
#endif
namespace UltimateReplay
{
    /// <summary>
    /// Stores global settings used by the replay system.
    /// </summary>
    
#if ULTIMATEREPLAY_DEV
    [CreateAssetMenu(menuName = "Ultimate Replay/Replay Settings")]
#endif
    [Serializable]
    public sealed class ReplaySettings : ScriptableObject
    {
        // Properties
        /// <summary>
        /// Get the default <see cref = "ReplayPlaybackOptions"/> that will be used if no options are provided by code.
        /// </summary>
        public ReplayPlaybackOptions PlaybackOptions
        {
            get
            {
                return playbackOptions;
            }
        }

        /// <summary>
        /// Get the default <see cref = "ReplayRecordOptions"/> that will be used if no options are provided by code.
        /// </summary>
        public ReplayRecordOptions RecordOptions
        {
            get
            {
                return recordOptions;
            }
        }

        /// <summary>
        /// Get the replay objects discovery mode to use when searching Unity scenes.
        /// </summary>
        public ReplaySceneDiscovery SceneDiscovery
        {
            get
            {
                return sceneDiscovery;
            }
        }

        /// <summary>
        /// Get all <see cref = "ReplayObjectLifecycleProvider"/> that have been setup by the user.
        /// </summary>
        public IReadOnlyList<ReplayObjectLifecycleProvider> PrefabProviders
        {
            get
            {
                return prefabProviders;
            }
        }

        /// <summary>
        /// Get the <see cref = "DefaultReplayPreparer"/> that will be used to prepare replay objects by default.
        /// </summary>
        public DefaultReplayPreparer DefaultReplayPreparer
        {
            get
            {
                return defaultReplayPreparer;
            }
        }

        // Methods
        /// <summary>
        /// Attempt to instantiate a replay prefab instance for the specified prefab id.
        /// </summary>
        /// <param name = "prefabId">The replay prefab id for the target replay object prefab</param>
        /// <param name = "position">The position where the replay object should be instantiated</param>
        /// <param name = "rotation">The initial rotation of the replay object</param>
        /// <returns>An instantiated <see cref = "ReplayObject"/> or null if the specified prefab id could not be found</returns>
        public ReplayObject InstantiatePrefabProvider(ReplayIdentity prefabId, Vector3 position, Quaternion rotation) => throw new System.NotImplementedException();
        /// <summary>
        /// Get the <see cref = "ReplayObjectLifecycleProvider"/> for the replay prefab with the specified prefab id.
        /// </summary>
        /// <param name = "prefabId">The replay id for the replay prefab</param>
        /// <returns>The associated <see cref = "ReplayObjectLifecycleProvider"/> or null if the prefab id could not be found</returns>
        public ReplayObjectLifecycleProvider GetPrefabProvider(ReplayIdentity prefabId) => throw new System.NotImplementedException();
        /// <summary>
        /// Returns a value indicating whether the specified replay id is a valid prefab id and has a <see cref = "ReplayObjectLifecycleProvider"/> associated with it.
        /// </summary>
        /// <param name = "prefabId">The replay id for a given replay prefab</param>
        /// <returns>True if a provider is registered or false if not</returns>
        public bool HasPrefabProvider(ReplayIdentity prefabId) => throw new System.NotImplementedException();
        public void AddPrefabProvider(ReplayObjectLifecycleProvider provider) => throw new System.NotImplementedException();
        public void RemovePrefabProvider(ReplayObjectLifecycleProvider provider) => throw new System.NotImplementedException();
    }
}