/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Common/ComponentData/ReplayEventData.cs
/// </summary>
using System.Collections.Generic;
using UltimateReplay.Storage;

namespace UltimateReplay.ComponentData
{
    /// <summary>
    /// Contains data about a recorded replay event.
    /// </summary>
    public struct ReplayEventData : IReplaySerialize, IReplayTokenSerialize
    {
        // Properties
        /// <summary>
        /// The identity of the behaviour component that recorded the event.
        /// </summary>
        public ReplayIdentity BehaviourIdentity
        {
            get
            {
                return behaviourIdentity;
            }
        }

        /// <summary>
        /// The unique event id as generated by the user.
        /// </summary>
        public ushort EventID
        {
            get
            {
                return eventID;
            }
        }

        /// <summary>
        /// The optional event state data containing data for the event.
        /// </summary>
        public ReplayState EventState
        {
            get
            {
                return eventState;
            }
        }

        /// <summary>
        /// Returns a value indicating whether the <see cref = "EventState"/> has any data or not.
        /// </summary>
        public bool HasEventState
        {
            get
            {
                return eventState != null;
            }
        }

        // Constructor
        /// <summary>
        /// Create a new instance.
        /// </summary>
        /// <param name = "behaviourIdentity">The identity of the behaviour component that recorded the event</param>
        /// <param name = "eventID">The unique id used to identify the event</param>
        public ReplayEventData(ReplayIdentity behaviourIdentity, ushort eventID)
        {
            this.behaviourIdentity = behaviourIdentity;
            this.eventID = eventID;
            this.eventState = null;
        }

        /// <summary>
        /// Create a new instance.
        /// </summary>
        /// <param name = "behaviourIdentity">The identity of the behaviour component that recorded the event</param>
        /// <param name = "eventID">The unique id used to identify the event</param>
        /// <param name = "eventState">The optional event state data</param>
        public ReplayEventData(ReplayIdentity behaviourIdentity, ushort eventID, ReplayState eventState)
        {
            this.behaviourIdentity = behaviourIdentity;
            this.eventID = eventID;
            this.eventState = eventState;
        }

        /// <summary>
        /// Serialize the event information to the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to write to</param>
        public void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Deserialize the event information from the specified <see cref = "ReplayState"/>.
        /// </summary>
        /// <param name = "state">The object state to read from</param>
        public void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
    }
}