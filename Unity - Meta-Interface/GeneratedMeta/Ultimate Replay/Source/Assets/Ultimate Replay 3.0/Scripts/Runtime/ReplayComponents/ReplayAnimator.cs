/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/ReplayAnimator.cs
/// </summary>
using System;
using UltimateReplay.Formatters;
using UltimateReplay.Statistics;
using UnityEngine;

namespace UltimateReplay
{
    [DisallowMultipleComponent]
    public sealed class ReplayAnimator : ReplayRecordableBehaviour
    {
        // Type
        [Flags]
        public enum ReplayIKFlags
        {
            None = 0,
            Position = 1 << 1,
            Rotation = 1 << 2,
            Weights = 1 << 3,
        }

        // Public
        public Animator observedAnimator;
        // Properties
        public override ReplayFormatter Formatter
        {
            get => throw new System.NotImplementedException();
        }

        public bool ReplayParameters
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public bool ReplayIKPositionTargets
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public bool ReplayIKRotationTargets
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public bool ReplayIKWeights
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public RecordPrecision RecordPrecision
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public bool Interpolate
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        public bool InterpolateParameters
        {
            get => throw new System.NotImplementedException();
            set => throw new System.NotImplementedException();
        }

        // Methods
#if UNITY_EDITOR
        private void OnValidate()
        {
            // Update serialize flags
            UpdateSerializeFlags();
        }
#endif
        protected override void Reset() => throw new System.NotImplementedException();
        protected override void Awake() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when preserved data should be reset.
        /// </summary>
        protected override void OnReplayReset() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when playback is about to begin.
        /// </summary>
        protected override void OnReplayStart() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when playback will end.
        /// </summary>
        protected override void OnReplayEnd() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when playback will be paused or resumed.
        /// </summary>
        /// <param name = "paused">True if playback is pausing or false if it is resuming</param>
        protected override void OnReplayPlayPause(bool paused) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the playback will be updated.
        /// Use this method to perform interpolation and smoothing processes.
        /// </summary>
        /// <param name = "t">The delta value from 0-1 between current replay snapshots</param>
        protected override void OnReplayUpdate(float t) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when recorded data should be captured and serialized.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> used to store the recorded data</param>
        public override void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when replay data should be deserialized and restored.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> containing the previously recorded data</param>
        public override void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
    }
}