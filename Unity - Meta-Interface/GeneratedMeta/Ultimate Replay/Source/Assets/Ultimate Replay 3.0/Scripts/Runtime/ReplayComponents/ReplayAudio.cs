/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/ReplayAudio.cs
/// </summary>
using System;
using System.Collections;
using UltimateReplay.Formatters;
using UltimateReplay.Serializers;
using UnityEngine;

namespace UltimateReplay
{
    /// <summary>
    /// Used to record and replay an AudioSource component 
    /// </summary>
    public class ReplayAudio : ReplayRecordableBehaviour
    {
        // Public
        /// <summary>
        /// The AudioSource component that will be observed during recording and used for playback during replays.
        /// Only a single AudioClip is supported and should be assigned to the AudioSource.
        /// </summary>
        public AudioSource observedAudio = null;
        // Methods
        protected override void Awake() => throw new System.NotImplementedException();
        protected override void Reset() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the component should reset any persistent data.
        /// </summary>
        protected override void OnReplayReset() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when an event occurs.
        /// </summary>
        /// <param name = "eventID"></param>
        /// <param name = "eventData"></param>
        protected override void OnReplayEvent(ushort eventID, ReplayState eventData) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system during playback mode.
        /// </summary>
        /// <param name = "replayTime">The <see cref = "ReplayTime"/> associated with the playback operation for this replay component</param>
        protected override void OnReplayUpdate(float t) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when playback is paused or resumed.
        /// </summary>
        /// <param name = "paused">True if the replay system is paused or false if it is resuming</param>
        protected override void OnReplayPlayPause(bool paused) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the replay component should serialize its recorded data.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to write to</param>
        public override void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the replay component should deserialize previously recorded data.
        /// </summary>
        /// <param name = "state">The <see cref = "ReplayState"/> to read from</param>
        public override void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
    }
}