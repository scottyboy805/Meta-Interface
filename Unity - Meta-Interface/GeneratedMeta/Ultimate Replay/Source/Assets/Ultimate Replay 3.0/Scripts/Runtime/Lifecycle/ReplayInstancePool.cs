/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Lifecycle/ReplayInstancePool.cs
/// </summary>
using System;
using System.Collections.Generic;

namespace UltimateReplay.Lifecycle
{
    /// <summary>
    /// Used to initialize existing and reused instances in conjunction with the <see cref = "ReplayInstancePool{T}"/>.
    /// </summary>
    public interface IReplayReusable
    {
        // Methods
        /// <summary>
        /// Called when an existing instance is about to be returned from the pool. 
        /// This method should reset any field members to default or safe values.
        /// </summary>
        void Initialize();
    }

    /// <summary>
    /// An instance pool used to recycle managed non-Unity objects.
    /// </summary>
    /// <typeparam name = "T">The type of object to manage</typeparam>
    public sealed class ReplayInstancePool<T>
    {
        // Constructor
        internal ReplayInstancePool(Func<T> newT) => throw new System.NotImplementedException();
        // Methods
        /// <summary>
        /// Get an existing recycled instance or create a new instance if required.
        /// Instances which implement the <see cref = "IReplayReusable"/> interface will have the <see cref = "IReplayReusable.Initialize"/> method called if a recycled instance is used.
        /// </summary>
        /// <returns>An instance of T</returns>
        public T GetReusable() => throw new System.NotImplementedException();
        /// <summary>
        /// Return an existing instance to the pool which is no longer required.
        /// </summary>
        /// <param name = "reusableInstance">The T instance to return to the pool</param>
        public void PushReusable(T reusableInstance) => throw new System.NotImplementedException();
    }
}