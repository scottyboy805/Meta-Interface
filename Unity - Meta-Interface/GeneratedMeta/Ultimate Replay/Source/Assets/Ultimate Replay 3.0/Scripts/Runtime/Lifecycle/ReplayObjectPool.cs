/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Lifecycle/ReplayObjectPool.cs
/// </summary>
using System;
#if !ULTIMATEREPLAY_DISABLE_UNITYPOOL
using UnityEngine.Pool;

#endif
namespace UltimateReplay.Lifecycle
{
#if ULTIMATEREPLAY_DISABLE_UNITYPOOL
    internal sealed class ReplayObjectPool
#else
    internal sealed class ReplayObjectPool : IObjectPool<ReplayObject>
#endif
    {
#if !ULTIMATEREPLAY_DISABLE_UNITYPOOL
        // Private
        private ObjectPool<ReplayObject> pool = null;
        // Properties
        int IObjectPool<ReplayObject>.CountInactive
        {
            get => throw new System.NotImplementedException();
        }

#else
        private Func<ReplayObject> createdPooled;
        private Action<ReplayObject> destroyPooled;
#endif
        // Constructor
        public ReplayObjectPool(Func<ReplayObject> createPooled, Action<ReplayObject> destroyPooled) => throw new System.NotImplementedException();
        // Methods
#if !ULTIMATEREPLAY_DISABLE_UNITYPOOL
        private void OnReturnToPool(ReplayObject instance) => throw new System.NotImplementedException();
#endif
        public void Clear() => throw new System.NotImplementedException();
        public ReplayObject Get() => throw new System.NotImplementedException();
#if !ULTIMATEREPLAY_DISABLE_UNITYPOOL
        PooledObject<ReplayObject> IObjectPool<ReplayObject>.Get(out ReplayObject v) => throw new System.NotImplementedException();
#endif
        public void Release(ReplayObject element) => throw new System.NotImplementedException();
    }
}