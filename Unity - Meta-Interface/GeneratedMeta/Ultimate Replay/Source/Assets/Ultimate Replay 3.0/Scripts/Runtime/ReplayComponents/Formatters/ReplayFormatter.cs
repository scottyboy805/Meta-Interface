/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/Formatters/ReplayFormatter.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UltimateReplay.Storage;

namespace UltimateReplay.Formatters
{
    public abstract class ReplayFormatter : IReplaySerialize, IReplayTokenSerialize
    {
        // Properties        
        public byte FormatterId
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        protected ReplayFormatter() => throw new System.NotImplementedException();
        // Methods
        IEnumerable<ReplayToken> IReplayTokenSerialize.GetSerializeTokens(bool includeOptional) => throw new System.NotImplementedException();
        public abstract void OnReplaySerialize(ReplayState state);
        public abstract void OnReplayDeserialize(ReplayState state);
        public static ReplayFormatter CreateFormatter(byte formatterId) => throw new System.NotImplementedException();
        public static ReplayFormatter GetFormatter(byte formatterId) => throw new System.NotImplementedException();
        public static T CreateFormatter<T>(byte formatterId)
            where T : ReplayFormatter => throw new System.NotImplementedException();
        public static T GetFormatter<T>(byte formatterId)
            where T : ReplayFormatter => throw new System.NotImplementedException();
        public static Type GetFormatterType(byte formatterId) => throw new System.NotImplementedException();
        public static T GetFormatterOfType<T>()
            where T : ReplayFormatter => throw new System.NotImplementedException();
    }
}