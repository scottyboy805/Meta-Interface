/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Storage/Memory/ReplayMemoryStorage.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;

namespace UltimateReplay.Storage
{
    public sealed class ReplayMemoryStorage : ReplayStorage
    {
        // Properties
        public override bool CanRead
        {
            get
            {
                CheckDisposed();
                return true;
            }
        }

        public override bool CanWrite
        {
            get
            {
                CheckDisposed();
                return true;
            }
        }

        public override float Duration
        {
            get
            {
                CheckDisposed();
                return duration;
            }
        }

        public override int MemorySize
        {
            get
            {
                CheckDisposed();
                return memorySize;
            }
        }

        public override int SnapshotSize
        {
            get
            {
                CheckDisposed();
                // Check for none
                if (segments.Count == 0)
                    return 0;
                // Get total
                return segments[segments.Count - 1].EndSequenceID;
            }
        }

        public override int IdentitySize
        {
            get
            {
                CheckDisposed();
                return identitySize;
            }
        }

        public float RollingBufferDuration
        {
            get
            {
                CheckDisposed();
                return rollingBufferDuration;
            }
        }

        // Constructor
        public ReplayMemoryStorage(string replayName = null, float rollingBufferDuration = -1f): base(replayName)
        {
            // Get size of identity
            identitySize = ReplayIdentity.byteSize;
            // Store buffer size
            this.rollingBufferDuration = rollingBufferDuration;
        }

        // Methods
        public override ReplaySnapshot FetchSnapshot(float timeStamp) => throw new System.NotImplementedException();
        public override ReplaySnapshot FetchSnapshot(int sequenceID) => throw new System.NotImplementedException();
        public override void StoreSnapshot(ReplaySnapshot state) => throw new System.NotImplementedException();
        public override void Prepare(ReplayStorageAction mode) => throw new System.NotImplementedException();
        protected override void OnDispose() => throw new System.NotImplementedException();
        public bool SaveToFile(string replayFile) => throw new System.NotImplementedException();
        public ReplayAsyncOperation SaveToFileAsync(string replayFile) => throw new System.NotImplementedException();
        public bool LoadFromFile(string replayFile) => throw new System.NotImplementedException();
        public ReplayAsyncOperation LoadFromFileAsync(string replayFile) => throw new System.NotImplementedException();
        public byte[] ToBytes() => throw new System.NotImplementedException();
        public bool FromBytes(byte[] bytes) => throw new System.NotImplementedException();
    }
}