/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Storage/ReplayState.Read.cs
/// </summary>
using System;
using System.Runtime.CompilerServices;
using System.Text;
using UltimateReplay.Util;
using UnityEngine;

namespace UltimateReplay
{
    public sealed partial class ReplayState
    {
        // Methods
        public T ReadSerializable<T>()
            where T : IReplaySerialize, new() => throw new System.NotImplementedException();
        public bool ReadSerializable(IReplaySerialize replaySerializable) => throw new System.NotImplementedException();
        public bool ReadSerializable<T>(ref T replaySerializable)
            where T : IReplaySerialize => throw new System.NotImplementedException();
        /// <summary>
        /// Read a byte from the state.
        /// </summary>
        /// <returns>Byte value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte ReadByte() => throw new System.NotImplementedException();
        public sbyte ReadSByte() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a byte array from the state.
        /// </summary>
        /// <param name = "amount">The number of bytes to read</param>
        /// <returns>Byte array value</returns>
        public byte[] ReadBytes(int amount) => throw new System.NotImplementedException();
        /// <summary>
        /// Fill a byte array with data from the state.
        /// </summary>
        /// <param name = "buffer">The byte array to store data in</param>
        /// <param name = "offset">The index offset to start filling the buffer at</param>
        /// <param name = "amount">The number of bytes to read</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ReadBytes(byte[] buffer, int offset, int amount) => throw new System.NotImplementedException();
        /// <summary>
        /// Read a short from the state.
        /// </summary>
        /// <returns>Short value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public short ReadInt16() => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ushort ReadUInt16() => throw new System.NotImplementedException();
        /// <summary>
        /// Read an int from the state.
        /// </summary>
        /// <returns>Int value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int ReadInt32() => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public uint ReadUInt32() => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public long ReadInt64() => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ulong ReadUInt64() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a float from the state.
        /// </summary>
        /// <returns>Float value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float ReadSingle() => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public double ReadDouble() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a bool from the state.
        /// </summary>
        /// <returns>Bool value</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool ReadBool() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a string from the state
        /// </summary>
        /// <returns>string value</returns>
        public string ReadString() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a vector2 from the state.
        /// </summary>
        /// <returns>Vector2 value</returns>
        public Vector2 ReadVector2() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a vector3 from the state.
        /// </summary>
        /// <returns>Vector3 value</returns>
        public Vector3 ReadVector3() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a vector4 from the state.
        /// </summary>
        /// <returns>Vector4 value</returns>
        public Vector4 ReadVector4() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a quaternion from the state.
        /// </summary>
        /// <returns>Quaternion value</returns>
        public Quaternion ReadQuaternion() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a color from the state.
        /// </summary>
        /// <returns>Color value</returns>
        public Color ReadColor() => throw new System.NotImplementedException();
        /// <summary>
        /// Read a color32 from the state.
        /// </summary>
        /// <returns>Color32 value</returns>
        public Color32 ReadColor32() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to read a low precision float.
        /// You should only use this method when the value is relatively small (less than 65000) and accuracy is not essential.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <returns>float value</returns>
        public float ReadHalf() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to read a low precision vector2.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <returns>vector2 value</returns>
        public Vector2 ReadVector2Half() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to read a low precision vector3.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <returns>vector3 value</returns>
        public Vector3 ReadVector3Half() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to read a low precision vector4.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <returns>vector4 value</returns>
        public Vector4 ReadVector4Half() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to read a low precision quaternion.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <returns>quaternion value</returns>
        public Quaternion ReadQuaternionHalf() => throw new System.NotImplementedException();
    }
}