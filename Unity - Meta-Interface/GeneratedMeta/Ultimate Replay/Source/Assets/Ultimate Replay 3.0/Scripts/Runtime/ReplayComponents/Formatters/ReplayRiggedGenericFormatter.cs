/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/Formatters/ReplayRiggedGenericFormatter.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using UltimateReplay.Storage;
using UnityEngine;

namespace UltimateReplay.Formatters
{
    public sealed class ReplayRiggedGenericFormatter : ReplayFormatter
    {
        public Vector3 RootPosition => throw new System.NotImplementedException()public RecordAxisFlags RootPositionAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootPosX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootPosY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootPosZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.RootPosX | ReplayRiggedGenericSerializeFlags.RootPosY | ReplayRiggedGenericSerializeFlags.RootPosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootPosX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootPosY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootPosZ;
            }
        }

        public RecordPrecision RootPositionPrecision
        {
            get
            {
                RecordPrecision precision = RecordPrecision.FullPrecision32Bit;
                // Check for low prescision set
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootLowPrecisionPos) != 0)
                    precision = RecordPrecision.HalfPrecision16Bit;
                return precision;
            }

            set
            {
                // Clear bit
                serializeFlags &= ~ReplayRiggedGenericSerializeFlags.RootLowPrecisionPos;
                // Set
                if (value == RecordPrecision.HalfPrecision16Bit)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootLowPrecisionPos;
            }
        }

        public Quaternion RootRotation => throw new System.NotImplementedException()public RecordAxisFlags RootRotationAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootRotX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootRotY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootRotZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.RootPosX | ReplayRiggedGenericSerializeFlags.RootPosY | ReplayRiggedGenericSerializeFlags.RootPosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootRotX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootRotY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootRotZ;
            }
        }

        public RecordPrecision RootRotationPrecision
        {
            get
            {
                RecordPrecision precision = RecordPrecision.FullPrecision32Bit;
                // Check for low prescision set
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootLowPrecisionRot) != 0)
                    precision = RecordPrecision.HalfPrecision16Bit;
                return precision;
            }

            set
            {
                // Clear bit
                serializeFlags &= ~ReplayRiggedGenericSerializeFlags.RootLowPrecisionRot;
                // Set
                if (value == RecordPrecision.HalfPrecision16Bit)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootLowPrecisionRot;
            }
        }

        public Vector3 RootScale => throw new System.NotImplementedException()public RecordAxisFlags RootScaleAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootScaX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootScaY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RootScaZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.RootPosX | ReplayRiggedGenericSerializeFlags.RootPosY | ReplayRiggedGenericSerializeFlags.RootPosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootScaX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootScaY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RootScaZ;
            }
        }

        public int BoneCount
        {
            get
            {
                return boneTransforms.Count;
            }
        }

        public RecordAxisFlags BonePositionAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.PosX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.PosY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.PosZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.PosX | ReplayRiggedGenericSerializeFlags.PosY | ReplayRiggedGenericSerializeFlags.PosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.PosX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.PosY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.PosZ;
            }
        }

        public RecordPrecision BonePositionPrecision
        {
            get
            {
                RecordPrecision precision = RecordPrecision.FullPrecision32Bit;
                // Check for low prescision set
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.LowPrecisionPos) != 0)
                    precision = RecordPrecision.HalfPrecision16Bit;
                return precision;
            }

            set
            {
                // Clear bit
                serializeFlags &= ~ReplayRiggedGenericSerializeFlags.LowPrecisionPos;
                // Set
                if (value == RecordPrecision.HalfPrecision16Bit)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.LowPrecisionPos;
            }
        }

        public RecordAxisFlags BoneRotationAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RotX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RotY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.RotZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.PosX | ReplayRiggedGenericSerializeFlags.PosY | ReplayRiggedGenericSerializeFlags.PosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RotX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RotY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.RotZ;
            }
        }

        public RecordPrecision BoneRotationPrecision
        {
            get
            {
                RecordPrecision precision = RecordPrecision.FullPrecision32Bit;
                // Check for low prescision set
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.LowPrecisionRot) != 0)
                    precision = RecordPrecision.HalfPrecision16Bit;
                return precision;
            }

            set
            {
                // Clear bit
                serializeFlags &= ~ReplayRiggedGenericSerializeFlags.LowPrecisionRot;
                // Set
                if (value == RecordPrecision.HalfPrecision16Bit)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.LowPrecisionRot;
            }
        }

        public RecordAxisFlags BoneScaleAxis
        {
            get
            {
                RecordAxisFlags flags = RecordAxisFlags.None;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.ScaX) != 0)
                    flags |= RecordAxisFlags.X;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.ScaY) != 0)
                    flags |= RecordAxisFlags.Y;
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.ScaZ) != 0)
                    flags |= RecordAxisFlags.Z;
                return flags;
            }

            set
            {
                // Clear bits
                serializeFlags &= ~(ReplayRiggedGenericSerializeFlags.PosX | ReplayRiggedGenericSerializeFlags.PosY | ReplayRiggedGenericSerializeFlags.PosZ);
                // Set
                if ((value & RecordAxisFlags.X) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.ScaX;
                if ((value & RecordAxisFlags.Y) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.ScaY;
                if ((value & RecordAxisFlags.Z) != 0)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.ScaZ;
            }
        }

        public RecordPrecision BoneScalePrecision
        {
            get
            {
                RecordPrecision precision = RecordPrecision.FullPrecision32Bit;
                // Check for low prescision set
                if ((serializeFlags & ReplayRiggedGenericSerializeFlags.LowPrecisionSca) != 0)
                    precision = RecordPrecision.HalfPrecision16Bit;
                return precision;
            }

            set
            {
                // Clear bit
                serializeFlags &= ~ReplayRiggedGenericSerializeFlags.LowPrecisionSca;
                // Set
                if (value == RecordPrecision.HalfPrecision16Bit)
                    serializeFlags |= ReplayRiggedGenericSerializeFlags.LowPrecisionSca;
            }
        }

        // Methods
        public override void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        public override void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        public void GetBoneTransform(int index, out Vector3 position, out Quaternion rotation, out Vector3 scale) => throw new System.NotImplementedException();
        public Vector3 GetBonePosition(int index) => throw new System.NotImplementedException();
        public Quaternion GetBoneRotation(int index) => throw new System.NotImplementedException();
        public Vector3 GetBoneScale(int index) => throw new System.NotImplementedException();
    }
}