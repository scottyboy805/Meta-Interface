/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayAsyncOperation.cs
/// </summary>
using UnityEngine;

namespace UltimateReplay
{
    public sealed class ReplayAsyncOperation<T> : ReplayAsyncOperation
    {
        // Properties
        public T Result
        {
            get
            {
                return result;
            }
        }

        // Constructor
        internal ReplayAsyncOperation()
        {
        }

        internal ReplayAsyncOperation(T result)
        {
            this.result = result;
        }
    }

    /// <summary>
    /// An awaitable object that is used to report when an async operation has finished.
    /// </summary>
    public class ReplayAsyncOperation : CustomYieldInstruction
    {
        // Properties
        /// <summary>
        /// Returns true if the associated async operation is not yet completed.
        /// </summary>
        public override bool keepWaiting
        {
            get
            {
                return isDone == false;
            }
        }

        /// <summary>
        /// Check whether the associated async operation has finished.
        /// </summary>
        public bool IsDone
        {
            get
            {
                return isDone;
            }
        }

        /// <summary>
        /// Check whether the associated async operation was successful.
        /// </summary>
        public bool Success
        {
            get
            {
                return success;
            }
        }

        public float Progress
        {
            get
            {
                return progress;
            }
        }

        public string Error
        {
            get
            {
                return error;
            }
        }

        // Constructor
        internal ReplayAsyncOperation()
        {
        }
    }
}