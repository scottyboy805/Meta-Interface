/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayScene.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.Linq;
using UltimateReplay.StatePreparation;
using UltimateReplay.Storage;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace UltimateReplay
{
    /// <summary>
    /// The scene state value used to determine which mode a particular scene instance is in.
    /// </summary>
    public enum ReplaySceneMode
    {
        /// <summary>
        /// The scene and all child objects are in live mode meaning gameplay can continue as normal.
        /// </summary>
        Live,
        /// <summary>
        /// The scene and all child objects are in playback mode. Objects in the scene should not be interfered with and will be updated frequently.
        /// </summary>
        Playback,
        /// <summary>
        /// The scene and all child objects are in record mode. Gameplay can continue but objects will be sampled frequently.
        /// </summary>
        Record,
    }

    /// <summary>
    /// The behaviour to use when detecting replay objects.
    /// </summary>
    public enum ReplaySceneDiscovery
    {
        /// <summary>
        /// Only include replay objects that are located in the current active Unity scene <see cref = "SceneManager.SetActiveScene(Scene)"/>.
        /// </summary>
        ActiveScene,
        /// <summary>
        /// Include replay objects from all loaded Unity scenes.
        /// </summary>
        AllScenes,
    }

    /// <summary>
    /// A <see cref = "ReplayScene"/> contains information about all active replay objects. 
    /// </summary>
    public sealed class ReplayScene
    {
        // Events
        /// <summary>
        /// Called when a replay object was added to this <see cref = "ReplayScene"/>.
        /// </summary>
        public event Action<ReplayObject> OnReplayObjectAdded;
        /// <summary>
        /// Called when a replay object was removed from this <see cref = "ReplayScene"/>.
        /// </summary>
        public event Action<ReplayObject> OnReplayObjectRemoved;
        // Public        
        /// <summary>
        /// A value indicating whether the replay objects stored in this scene instance should be reverted to their initial state when playback ends.
        /// </summary>
        public bool restorePreviousSceneState = true;
        // Properties
        /// <summary>
        /// Enable or disable the replay scene in preparation for playback or live mode.
        /// When true, all replay objects will be prepared for playback causing certain components or scripts to be disabled to prevent interference from game systems.
        /// A prime candidate would be the RigidBody component which could cause a replay object to be affected by gravity and as a result deviate from its intended position.
        /// When false, all replay objects will be returned to their 'Live' state when all game systems will be reactivated.
        /// </summary>
        public bool ReplayEnabled
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Returns a value indicating whether the <see cref = "ReplayScene"/> contains any <see cref = "ReplayObject"/>.
        /// </summary>
        public bool IsEmpty
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get a collection of all game objects that are registered with the replay system.
        /// </summary>
        public HashSet<ReplayObject> ActiveReplayObjects
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get a collection of all <see cref = "ReplayBehaviour"/> components that are registered in this <see cref = "ReplayScene"/>.
        /// </summary>
        public HashSet<ReplayBehaviour> ActiveReplayBehaviours
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Create a new replay scene with no <see cref = "ReplayObject"/> added.
        /// </summary>
        /// <param name = "replayPreparer">A <see cref = "IReplayPreparer"/> implementation used to prepare scene objects when switching between playback and live scene modes</param>
        public ReplayScene(IReplayPreparer replayPreparer = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene and add the specified replay object.
        /// </summary>
        /// <param name = "replayObject">The single <see cref = "ReplayObject"/> to add to the scene</param>
        /// <param name = "replayPreparer">A <see cref = "IReplayPreparer"/> implementation used to prepare scene objects when switching between playback and live scene modes</param>
        public ReplayScene(ReplayObject replayObject, IReplayPreparer replayPreparer = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene from the specified collection or replay objects.
        /// </summary>
        /// <param name = "replayObjects">A collection of <see cref = "ReplayObject"/> that will be added to the scene</param>
        /// <param name = "replayPreparer">A <see cref = "IReplayPreparer"/> implementation used to prepare scene objects when switching between playback and live scene modes</param>
        public ReplayScene(IEnumerable<ReplayObject> replayObjects, IReplayPreparer replayPreparer = null) => throw new System.NotImplementedException();
        // Methods
        /// <summary>
        /// Add the specified game object to the replay scene. Only game objects with a <see cref = "ReplayObject"/> attached will be accepted.
        /// Replay objects must be added to a replay scene in order to be recorded or replayed by the replay system.
        /// </summary>
        /// <param name = "gameObject">The target game object to add to the replay scene</param>
        /// <exception cref = "ArgumentNullException">The specified game object is null</exception>
        /// <exception cref = "InvalidOperationException">The specified game object does not have a <see cref = "ReplayObject"/> attached</exception>
        public void AddReplayObject(GameObject gameObject) => throw new System.NotImplementedException();
        /// <summary>
        /// Registers a replay object with the replay system so that it can be recorded for playback.
        /// Typically all <see cref = "ReplayObject"/> will auto register when they 'Awake' meaning that you will not need to manually register objects. 
        /// </summary>
        /// <param name = "replayObject">The <see cref = "ReplayObject"/> to register</param>
        /// <exception cref = "ArgumentNullException">The specified game object is null</exception>
        public void AddReplayObject(ReplayObject replayObject) => throw new System.NotImplementedException();
        /// <summary>
        /// Unregisters a replay object from this replay scene.
        /// </summary>
        /// <param name = "replayObject">The <see cref = "ReplayObject"/> to unregister</param>
        public void RemoveReplayObject(GameObject gameObject) => throw new System.NotImplementedException();
        /// <summary>
        /// Unregisters a replay object from the replay system so that it will no longer be recorded for playback.
        /// Typically all <see cref = "ReplayObject"/> will auto un-register when they are destroyed so you will normally not need to un-register a replay object. 
        /// </summary>
        /// <param name = "replayObject"></param>
        public void RemoveReplayObject(ReplayObject replayObject) => throw new System.NotImplementedException();
        /// <summary>
        /// Remove all replay objects form this replay scene.
        /// </summary>
        public void Clear() => throw new System.NotImplementedException();
        /// <summary>
        /// Set the current replay scene mode.
        /// Use this method to switch the scene between playback and live modes.
        /// Playback modes will run the <see cref = "replayPreparer"/> on all scene objects to disable or re-enable elements that could affect playback.
        /// </summary>
        /// <param name = "mode">The scene mode to switch to</param>
        /// <param name = "initialStateBuffer">The initial state buffer</param>
        public void SetReplaySceneMode(ReplaySceneMode mode, ReplayStorage storage, RestoreSceneMode restoreMode = RestoreSceneMode.RestoreState) => throw new System.NotImplementedException();
        /// <summary>
        /// Take a snapshot of the current replay scene using the specified timestamp.
        /// </summary>
        /// <param name = "timeStamp">The timestamp for the frame indicating its position in the playback sequence</param>
        /// <param name = "initialStateBuffer">The <see cref = "ReplayInitialDataBuffer"/> to restore dynamic object information from</param>
        /// <returns>A new snapshot of the current replay scene</returns>
        public ReplaySnapshot CaptureSnapshot(float timeStamp, int sequenceID, ReplayPersistentData persistentData) => throw new System.NotImplementedException();
        /// <summary>
        /// Restore the scene to the state described by the specified snapshot.
        /// </summary>
        /// <param name = "snapshot">The snapshot to restore</param>
        /// <param name = "storage">The <see cref = "ReplayStorage"/> used to restore dynamic object information from</param>
        public void RestoreSnapshot(ReplaySnapshot snapshot, ReplayStorage storage, bool simulate = false, bool ignoreUpdate = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the replay scene has a <see cref = "ReplayObject"/> registered with the specified <see cref = "ReplayIdentity"/>.
        /// </summary>
        /// <param name = "replayIdentity">The id of the to search for</param>
        /// <returns>True if an object with the specified id is added to this <see cref = "ReplayScene"/></returns>
        public bool HasReplayObject(ReplayIdentity replayIdentity) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if any registered <see cref = "ReplayObject"/> have been invalidated or destroyed since they were added to the scene.
        /// </summary>
        /// <param name = "throwOnError">True if an exception should be thrown if there are integrity issues</param>
        /// <returns>True if this scene is valid or false if one or more registered <see cref = "ReplayObject"/> have been destroyed but not unregistered</returns>
        /// <exception cref = "Exception">The replay scene contains one or more destroyed objects</exception>
        public bool CheckIntegrity(bool throwOnError) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to find a <see cref = "ReplayObject"/> with the specified <see cref = "ReplayIdentity"/>
        /// </summary>
        /// <param name = "replayIdentity">The identity of the object to find</param>
        /// <returns>A <see cref = "ReplayObject"/> with the specified ID or null if the object was not found</returns>
        public ReplayObject GetReplayObject(ReplayIdentity replayIdentity) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene from the active Unity scene.
        /// All <see cref = "ReplayObject"/> in the active scene will be added to the <see cref = "ReplayScene"/> result.
        /// The active scene is equivalent of <see cref = "SceneManager.GetActiveScene"/>;
        /// </summary>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromCurrentScene(IReplayPreparer preparer = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene from the active Unity scene excluding the specified replay objects.
        /// All <see cref = "ReplayObject"/> in the active scene will be added to the <see cref = "ReplayScene"/> result.
        /// The active scene is equivalent of <see cref = "SceneManager.GetActiveScene"/>;
        /// </summary>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromCurrentSceneExcept(IReplayPreparer preparer = null, params ReplayObject[] exclude) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene from the specified Unity scene.
        /// All <see cref = "ReplayScene"/> in the specified scene will be added to the <see cref = "ReplayScene"/> result. 
        /// </summary>
        /// <param name = "scene">The Unity scene used to create the <see cref = "ReplayScene"/></param>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromScene(Scene scene, IReplayPreparer preparer = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene from the specified Unity scene excluding the specified replay objects.
        /// All <see cref = "ReplayScene"/> in the specified scene will be added to the <see cref = "ReplayScene"/> result. 
        /// </summary>
        /// <param name = "scene">The Unity scene used to create the <see cref = "ReplayScene"/></param>
        /// <param name = "exclude">A collection of replay objects that should not be added to the resulting scene</param>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromSceneExcept(Scene scene, IReplayPreparer preparer = null, params ReplayObject[] exclude) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene containing all active replay objects from all loaded Unity scenes.
        /// </summary>
        /// <param name = "preparer"></param>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromAllScenes(IReplayPreparer preparer = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a new replay scene containing all active replay objects from all loaded Unity scenes, not including the specified exclude replay objects.
        /// </summary>
        /// <param name = "preparer"></param>
        /// <param name = "exclude">A collection of replay objects that should not be added to the resulting scene</param>
        /// <returns>A new ReplayScene instance</returns>
        public static ReplayScene FromAllScenesExcept(IReplayPreparer preparer = null, params ReplayObject[] exclude) => throw new System.NotImplementedException();
    }
}