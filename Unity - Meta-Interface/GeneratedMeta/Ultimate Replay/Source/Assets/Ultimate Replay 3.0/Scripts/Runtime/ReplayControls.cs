/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayControls.cs
/// </summary>
using System;
using UltimateReplay.Storage;
using UnityEditor;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace UltimateReplay
{
    public class ReplayControls : MonoBehaviour
    {
        // Type
        [Serializable]
        public class HighlightButton
        {
            // Public
            public Button button;
            public Image highlight;
        }

        /// <summary>
        /// Helper class used to detect drag start and end events on UI slider control (Seek slider bar).
        /// </summary>
        public class SliderCallback : MonoBehaviour, IBeginDragHandler, IEndDragHandler
        {
            // Public
            public bool isDragging = false;
            // Methods
            public void OnBeginDrag(PointerEventData eventData) => throw new System.NotImplementedException();
            public void OnEndDrag(PointerEventData eventData) => throw new System.NotImplementedException();
        }

        // Protected
        protected ReplayStorage storage;
        protected ReplayRecordOperation record = null;
        protected ReplayPlaybackOperation playback = null;
        [Header("Options")]
        [Tooltip("Should recording start as soon as the replay controls have loaded")]
        public bool recordOnStart = true;
        [Tooltip("Replays will be saved to file when enabled or will be stored in memory when disabled")]
        public bool recordToFile = false;
        [Tooltip("The name of the replay file to save when 'recordToFile' is enabled")]
        public string recordFileName = "MyReplay.replay";
        // Properties
        public bool IsRecording
        {
            get => throw new System.NotImplementedException();
        }

        public bool IsReplaying
        {
            get => throw new System.NotImplementedException();
        }

        public bool IsLive
        {
            get => throw new System.NotImplementedException();
        }

        // Methods
        protected virtual void Awake() => throw new System.NotImplementedException();
        protected virtual void Start() => throw new System.NotImplementedException();
        protected virtual void Update() => throw new System.NotImplementedException();
        protected virtual void OnDestroy() => throw new System.NotImplementedException();
        public virtual void ReplayGoLive() => throw new System.NotImplementedException();
        public virtual void ReplayBeginRecording() => throw new System.NotImplementedException();
        public virtual void ReplayBeginPlayback() => throw new System.NotImplementedException();
        protected virtual void ReplayStopRecording() => throw new System.NotImplementedException();
        protected virtual void ReplayStopPlayback() => throw new System.NotImplementedException();
        protected virtual void ReplayStartRecording() => throw new System.NotImplementedException();
        protected virtual void ReplayStartPlayback() => throw new System.NotImplementedException();
        public void SeekPlayback(float value) => throw new System.NotImplementedException();
        public void TogglePlaybackPaused() => throw new System.NotImplementedException();
        public void TogglePlaybackSpeedMenu() => throw new System.NotImplementedException();
        public void TogglePlaybackDirection() => throw new System.NotImplementedException();
        public void TogglePlaybackLooped() => throw new System.NotImplementedException();
        public void SetPlaybackSpeed(float value) => throw new System.NotImplementedException();
    }
}