/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Storage/Stream/ReplayToken.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.Reflection;

namespace UltimateReplay.Storage
{
    public struct ReplayToken
    {
        // Public
        public static readonly ReplayToken invalid;
        // Properties
        public bool IsValid
        {
            get => throw new System.NotImplementedException();
        }

        public string Identifier
        {
            get => throw new System.NotImplementedException();
        }

        public bool IsOptional
        {
            get => throw new System.NotImplementedException();
        }

        public Type ValueType
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        internal ReplayToken(string identifier, FieldInfo field, bool isOptional) => throw new System.NotImplementedException();
        internal ReplayToken(string identifier, PropertyInfo property, bool isOptional) => throw new System.NotImplementedException();
        // Methods
        public object FetchValue(object instance) => throw new System.NotImplementedException();
        public void StoreValue(object instance, object value) => throw new System.NotImplementedException();
        public static ReplayToken Create(string fieldOrPropertyName, Type declaringType, bool isOptional = false) => throw new System.NotImplementedException();
        public static ReplayToken Create(FieldInfo field, bool isOptional = false) => throw new System.NotImplementedException();
        public static ReplayToken Create(PropertyInfo property, bool isOptional = false) => throw new System.NotImplementedException();
        public static IEnumerable<ReplayToken> Tokenize(object instance) => throw new System.NotImplementedException();
        public static IEnumerable<ReplayToken> Tokenize(Type type) => throw new System.NotImplementedException();
        public static IEnumerable<ReplayToken> Tokenize<T>() => throw new System.NotImplementedException();
    }
}