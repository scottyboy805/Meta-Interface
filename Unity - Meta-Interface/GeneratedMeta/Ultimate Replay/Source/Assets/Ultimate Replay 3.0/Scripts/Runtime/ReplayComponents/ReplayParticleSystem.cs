/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/ReplayParticleSystem.cs
/// </summary>
using System;
using UltimateReplay.Formatters;
using UnityEngine;

namespace UltimateReplay
{
    /// <summary>
    /// A replay component which can be used to record and replay the Unity ParticleSystem.
    /// </summary>
    public class ReplayParticleSystem : ReplayRecordableBehaviour
    {
        // Public
        /// <summary>
        /// The Unity particle system that will be recorded and also used for playback.
        /// </summary>
        public ParticleSystem observedParticleSystem = null;
        // Properties
        public override ReplayFormatter Formatter
        {
            get
            {
                return formatter;
            }
        }

        public bool LowPrecision
        {
            get
            {
                return lowPrecision;
            }

            set
            {
                lowPrecision = value;
                UpdateSerializeFlags();
            }
        }

        public bool Interpolate
        {
            get
            {
                return interpolate;
            }

            set
            {
                interpolate = value;
            }
        }

        // Methods
        protected override void Awake() => throw new System.NotImplementedException();
        protected override void Reset() => throw new System.NotImplementedException();
        /// <summary>
        ///  Called by the replay system when persistent data should be reset.
        /// </summary>
        protected override void OnReplayReset() => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system during playback mode.
        /// </summary>
        /// <param name = "replayTime">The <see cref = "ReplayTime"/> for the associated playback operation</param>
        protected override void OnReplayUpdate(float t) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the component should serialize its recorded data.
        /// </summary>
        /// <param name = "state">The state object to write to</param>
        public override void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        /// <summary>
        /// Called by the replay system when the component should deserialize previously recorded data.
        /// </summary>
        /// <param name = "state">The state object to read from</param>
        public override void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
    }
}