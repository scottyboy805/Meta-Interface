/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/ReplayComponents/Formatters/ReplayObjectFormatter.cs
/// </summary>
using JetBrains.Annotations;
using System;
using System.Collections.Generic;
using UltimateReplay.ComponentData;

namespace UltimateReplay.Formatters
{
    public sealed class ReplayObjectFormatter : ReplayFormatter
    {
        /// <summary>
        /// The <see cref = "ReplayIdentity"/> of the parent prefab if applicable.
        /// </summary>
        public ReplayIdentity PrefabIdentity
        {
            get
            {
                return prefabIdentity;
            }

            set
            {
                prefabIdentity = value;
                // Clear bits
                serializeFlags &= ~ReplayObjectSerializeFlags.Prefab;
                // Add flag if id is valid
                if (prefabIdentity.IsValid == true)
                    serializeFlags |= ReplayObjectSerializeFlags.Prefab;
            }
        }

        /// <summary>
        /// A collection of <see cref = "ReplayComponentData"/> containing all the necessary persistent data for all observed components.
        /// </summary>
        public IList<ReplayComponentData> ComponentStates
        {
            get
            {
                return componentStates;
            }
        }

        /// <summary>
        /// A collection of <see cref = "ReplayVariableData"/> containing all the necessary persistent data for all recorded variables.
        /// </summary>
        public IList<ReplayVariableData> VariableStates
        {
            get
            {
                return variableStates;
            }
        }

        /// <summary>
        /// A collection of <see cref = "ReplayEventData"/> containing all the necessary persistent data for all recorded events.
        /// </summary>
        public IList<ReplayEventData> EventStates
        {
            get
            {
                return eventStates;
            }
        }

        /// <summary>
        /// A collection of <see cref = "ReplayMethodData"/> containing all the necessary persistent data for all recorded methods.
        /// </summary>
        public IList<ReplayMethodData> MethodStates
        {
            get
            {
                return methodStates;
            }
        }

        // Methods
        public override void OnReplaySerialize(ReplayState state) => throw new System.NotImplementedException();
        public override void OnReplayDeserialize(ReplayState state) => throw new System.NotImplementedException();
        public void OnReplayDeserialize(ReplayState state, bool simulate) => throw new System.NotImplementedException();
    }
}