/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: UltimateReplay.dll
/// From source file: Assets/Ultimate Replay 3.0/Scripts/Runtime/Storage/ReplayState.Write.cs
/// </summary>
using System;
using System.Runtime.CompilerServices;
using System.Text;
using UltimateReplay.Util;
using UnityEngine;
using static UnityEngine.UIElements.UxmlAttributeDescription;

namespace UltimateReplay
{
    public partial class ReplayState
    {
        public void Write(IReplaySerialize replaySerializable) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a byte to the state.
        /// </summary>
        /// <param name = "value">Byte value</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Write(byte value) => throw new System.NotImplementedException();
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Write(sbyte value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a byte array to the state.
        /// </summary>
        /// <param name = "bytes">Byte array value</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Write(byte[] bytes) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a byte array to the state using an offset position and length.
        /// </summary>
        /// <param name = "bytes">Byte array value</param>
        /// <param name = "offset">The start index to read data from the array</param>
        /// <param name = "length">The amount of data to read</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Write(byte[] bytes, int offset, int length) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a short to the state.
        /// </summary>
        /// <param name = "value">Short value</param>
        public void Write(short value) => throw new System.NotImplementedException();
        public void Write(ushort value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write an int to the state.
        /// </summary>
        /// <param name = "value">Int value</param>
        public void Write(int value) => throw new System.NotImplementedException();
        public void Write(uint value) => throw new System.NotImplementedException();
        public void Write(long value) => throw new System.NotImplementedException();
        public void Write(ulong value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a float to the state.
        /// </summary>
        /// <param name = "value">Float value</param>
        public void Write(float value) => throw new System.NotImplementedException();
        public void Write(double value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a bool to the state.
        /// </summary>
        /// <param name = "value">bool value</param>
        public void Write(bool value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a string to the state.
        /// </summary>
        /// <param name = "value">string value</param>
        public void Write(string value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector2 to the state.
        /// </summary>
        /// <param name = "value">Vector2 value</param>
        public void Write(in Vector2 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector3 to the state.
        /// </summary>
        /// <param name = "value">Vector3 value</param>
        public void Write(in Vector3 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector4 to the state.
        /// </summary>
        /// <param name = "value">Vector4 value</param>
        public void Write(in Vector4 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a quaternion to the state.
        /// </summary>
        /// <param name = "value">Quaternion value</param>
        public void Write(in Quaternion value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a color to the state.
        /// </summary>
        /// <param name = "value">Color value</param>
        public void Write(in Color value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a color32 value to the state.
        /// </summary>
        /// <param name = "value">Color32 value</param>
        public void Write(in Color32 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to write a 32 bit float value as a low precision 16 bit representation.
        /// You should only use this method when the value is relatively small (less than 65000).
        /// Accuracy may be lost by storing low precision values.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <param name = "value">float value</param>
        public void WriteHalf(float value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector2 to the state using half precision packing.
        /// Accuracy may be lost by storing low precision values.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <param name = "value">vector2 value</param>
        public void WriteHalf(in Vector2 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector3 to the state using half precision packing.
        /// Accuracy may be lost by storing low precision values.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <param name = "value">vector3 value</param>
        public void WriteHalf(in Vector3 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a vector4 to the state using half precision packing.
        /// Accuracy may be lost by storing low precision values.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <param name = "value">vector4 value</param>
        public void WriteHalf(in Vector4 value) => throw new System.NotImplementedException();
        /// <summary>
        /// Write a quaternion to the state using half precision packing.
        /// Accuracy may be lost by storing low precision values.
        /// When read, a half value will almost certainly be within +-0.015f tolerance of the original value.
        /// </summary>
        /// <param name = "value">quaternion value</param>
        public void WriteHalf(in Quaternion value) => throw new System.NotImplementedException();
    }
}