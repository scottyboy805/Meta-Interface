/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/DLC.cs
/// </summary>
using Codice.Client.Common.GameUI;
using DLCToolkit.DRM;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using UnityEditor;
using UnityEngine;
using static Codice.CM.WorkspaceServer.WorkspaceTreeDataStore;

[assembly: InternalsVisibleTo("DLCToolkit.BuildTools")]
[assembly: InternalsVisibleTo("DLCToolkit.EditorTools")]
namespace DLCToolkit
{
    /// <summary>
    /// Main API for interacting with and loading DLC content from an external source.
    /// Also provides API's for retrieving DLC from various DRM (Digital Rights Management) services such as Steamworks, Google Play and more.
    /// DRM is used to ensure that the current user has access to or owns the requested DLC content if it is paid for or licensed in any way by the providing service.
    /// </summary>
    public static class DLC
    {
        // Public
        /// <summary>
        /// Get the current version of DLC Toolkit.
        /// </summary>
        public static readonly Version ToolkitVersion;
        /// <summary>
        /// Check if scripting is supported on this platform.
        /// Scripting is supported only on desktop platforms using the Mono backend.
        /// </summary>
        public static bool IsScriptingSupported
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the service that can provide a DRM container for the current build configuration.
        /// </summary>
        public static IDRMServiceProvider DRMServiceProvider
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Try to get all DLC unique keys that are available locally.
        /// Local keys are simply DLC unique keys which were known about at the time of building the game (DLC profiles created before building the game).
        /// Note that only unique keys for enabled DLC profiles at the time of building the game will be available.
        /// For that reason the array will only list DLC contents that were created during development of the game, whether the DLC content was released or not.
        /// As a result it is highly recommended that you check with the current DRM provider for a true reflection of available DLC content using <see cref = "IDRMProvider.DLCUniqueKeysAsync"/> (If the current platform has DRM support and the DRM provider can support listing unique contents).
        /// Alternatively you might use these local keys in combination with <see cref = "IDRMProvider.IsDLCAvailableAsync(IDLCAsyncProvider, string)"/> to determine whether the DLC is usable (Exists via DRM) and is available (Installed locally).
        /// </summary>
        public static string[] LocalDLCUniqueKeys
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Try to get all DLC unique keys that are available remotely. 
        /// Remote keys are simply DLC unique keys which have been published to a DRM provider such as Steamworks.
        /// Some DRM providers may not support listing DLC contents that are published remotely.
        /// Note that only published unique keys will be returned here if the DRM provider supports listing available DLC contents.
        /// Note also that all DLC unique keys will be listed here even if the user does not own or subscribed to the downloadable content. 
        /// For that reason you should use <see cref = "IDRMProvider.IsDLCAvailableAsync(IDLCAsyncProvider, string)"/> to determine whether the DLC is usable (Exists via DRM) and is available (Installed locally).
        /// </summary>
        /// <exception cref = "NotSupportedException">DRM provider does not support listing published DLC unique keys</exception>
        public static DLCAsync<string[]> RemoteDLCUniqueKeysAsync
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all DLC contents that are currently available.
        /// This could include contents that are currently loading or loaded.
        /// </summary>
        public static IEnumerable<DLCContent> AllDLCContents
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all DLC contents that are currently available with a loaded status.
        /// The DLC has been successfully loaded into memory.
        /// </summary>
        public static IEnumerable<DLCContent> LoadedDLCContents
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get all DLC contents that are currently available with a loading status.
        /// The DLC is currently in the process of being loaded into memory.
        /// </summary>
        public static IEnumerable<DLCContent> LoadingDLCContents
        {
            get => throw new System.NotImplementedException();
        }

        // Methods        
        /// <summary>
        /// Check if the DLC with the specified name and optional version is currently loaded.
        /// Note that this method will check the DLC name/version and not the DLC unique key which can be checked by <see cref = "IsDLCLoaded(string)"/> instead.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">An optional version if you want to find a specific version of a loaded DLC</param>
        /// <returns>True if the DLC is loaded or false if not</returns>
        public static bool IsDLCLoaded(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the DLC with the specified unique key is currently loaded.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>True if the DLC is loaded or false if not</returns>
        public static bool IsDLCLoaded(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the DLC with the specified name and optional version is currently being loaded.
        /// Note that this method will check the DLC name/version and not the DLC unique key which can be checked by <see cref = "IsDLCLoading(string)"/> instead.
        /// Note that this method is only of use when DLC async loading is used.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">An optional version if you want to find a specific version of a loading DLC</param>
        /// <returns>True if the DLC is loading or false if not</returns>
        public static bool IsDLCLoading(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the DLC with the specified unique key is currently being loaded.
        /// Note that this method is only of use when DLC async loading is used.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>True if the DLC is loading or false if not</returns>
        public static bool IsDLCLoading(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC loaded from the specified path if it has already started loading or has been loaded.
        /// </summary>
        /// <param name = "path">The path of the DLC</param>
        /// <returns>The DLC that is already loading or loaded from the provided path, or null if the DLC was not found</returns>
        public static DLCContent GetDLCFrom(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC loaded with the specified name and optional version if it has already started loading or has been loaded.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>The DLC that is already loading or loaded from the provided path, or null if the DLC was not found</returns>
        public static DLCContent GetDLC(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC with the specified key if it has already started loading or has been loaded.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>The DLC that is already loading or loaded with the provided unique key, or null if the DLC was not found</returns>
        public static DLCContent GetDLC(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC loaded with the specified name and optional version if it has already been loaded.
        /// Note this will only detect successfully loaded DLC's and not DLC's that are currently loading.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>The DLC that is already loaded from the provided name and optional version, or null if the DLC was not found</returns>
        public static DLCContent GetLoadedDLC(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC with the specified key if it has already been loaded.
        /// Note this will only detect successfully loaded DLC's and not DLC's that are currently loading.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>The DLC that is already loaded with the provided unique key, or null if the DLC was not found</returns>
        public static DLCContent GetLoadedDLC(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC currently loading with the specified name and optional version.
        /// Note this will only detect DLC's that are currently in the process of being loaded and not DLC's that are currently loaded.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>The DLC that is loading with the provided name and optional version, or null if the DLC was not found</returns>
        public static DLCContent GetLoadingDLC(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the DLC currently loading with the specified key.
        /// Note this will only detect successfully loaded DLC's and not DLC's that are currently loaded.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>The DLC that is loading with the provided unique key, or null if the DLC was not found</returns>
        public static DLCContent GetLoadingDLC(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the specified DLC is purchased and installed.
        /// Some providers may need to make a web request to check for purchased DLC, so this operations must be async.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the dlc</param>
        /// <returns>True if the dlc is installed or false if not</returns>
        /// <exception cref = "NotSupportedException">No DRM provider for ths current platform</exception>
        public static DLCAsync<bool> IsAvailable(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Request that the dlc with the provided unique key is installed onto the system if it is available to the user.
        /// </summary>
        /// <param name = "uniqueKey">The async provider to allow async tasks to be started</param>
        /// <returns>The unique key of the dlc</returns>
        /// <exception cref = "NotSupportedException">No DRM provider for ths current platform</exception>
        public static DLCAsync RequestInstall(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Request that the dlc with the provided unique key is uninstalled from the system if it is currently installed.
        /// </summary>
        /// <param name = "uniqueKey">The unique key of the dlc</param>
        /// <exception cref = "NotSupportedException">No DRM provider for ths current platform</exception>
        public static void RequestUninstall(string uniqueKey) => throw new System.NotImplementedException();
        // ### Load batch
        /// <summary>
        /// Attempt to load multiple DLC content simultaneously with the specified unique keys asynchronously.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCFromAsync(string)"/>.
        /// Note that this method will suppress any exceptions and report them in the resulting async operation if caught.
        /// </summary>
        /// <param name = "uniqueKeys">An array of unique keys for all DLC content to load</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the user but not available locally. Only available in async mode</param>
        /// <returns>A batch async operation which can report progress for the combined load operation as a whole, or can provide access to each inner load request</returns>
        /// <exception cref = "ArgumentNullException">The unique keys are empty</exception>
        public static DLCBatchAsync<DLCContent> LoadDLCBatchAsync(string[] uniqueKeys, bool installOnDemand) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load multiple DLC content simultaneously from the paths asynchronously.
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCFromAsync(string)"/>.
        /// Note that this method will suppress any exceptions and report them in the resulting async operation if caught.
        /// </summary>
        /// <param name = "paths">An array of paths for all DLC content to load</param>
        /// <returns>A batch async operation which can report progress for the combined load operation as a whole, or can provide access to each inner load request</returns>
        /// <exception cref = "ArgumentNullException">The paths are empty</exception>
        public static DLCBatchAsync<DLCContent> LoadDLCBatchFromAsync(string[] paths) => throw new System.NotImplementedException();
        // ### Load
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is not suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLC(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// This is a reduced load mode and it will only be possible to access the <see cref = "IDLCMetadata"/> for the DLC and nothing more.
        /// Designed to be a quick operation for accessing metadata, but may take some time to complete depending upon DRM provider and availability.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static IDLCMetadata LoadDLCMetadata(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// This is a reduced load mode and it will be possible to access extra metadata for assets and scenes, but it will not be possible to load any asset or scene content into the game.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is not suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLCMetadataWithAssets(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is not suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLC(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// This is a reduced load mode and it will only be possible to access the <see cref = "IDLCMetadata"/> for the DLC and nothing more.
        /// Designed to be a quick operation for accessing metadata, but may take some time to complete depending upon DRM provider and availability.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is not suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static IDLCMetadata LoadDLCMetadata(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key.
        /// This is a reduced load mode and it will be possible to access extra metadata for assets and scenes, but it will not be possible to load any asset or scene content into the game.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will need to be available (Owned and installed) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is not suitable DRM provider for this platform</exception>
        /// <exception cref = "TimeoutException">A DRM request timed out and the operation is aborted to avoid infinite waiting or freezing the application</exception>
        /// <exception cref = "DLCNotAvailableException">The requested DLC is owned but is not currently installed or available locally. You may need to request that the DLC is installed using <see cref = "IDRMProvider.RequestInstallDLCAsync(IDLCAsyncProvider, string)"/></exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLCMetadataWithAssets(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content from the specified file path.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLCFrom(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata only from the specified file path.
        /// Intended to be very quick access and will only load the absolute minimum amount of data required to access the meta information for the DLC.
        /// Only the DLC metadata will be loaded into memory.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "IDLCMetadata"/> containing the loaded DLC metadata</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static IDLCMetadata LoadDLCMetadataFrom(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata with assets only from the specified file path.
        /// Intended to be very quick access and will only load the absolute minimum amount of data required to access the meta information for the DLC.
        /// Only the DLC metadata and asset metadata will be loaded into memory (Assets, scenes and scripts will not be loadable).
        /// <see cref = "DLCContent.SharedAssets"/> and <see cref = "DLCContent.SceneAssets"/> will be accessible after successful load to discover meta information about included assets.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCContent LoadDLCMetadataWithAssetsFrom(string path) => throw new System.NotImplementedException();
        // ### Load Async
        /// <summary>
        /// Attempt to load DLC content from the specified stream provider asynchronously.
        /// If the target DLC is already being loaded or has been loaded, this method will simply return the current load operation or a completed operation with the already loaded <see cref = "DLCContent"/>.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCFromAsync(string)"/>.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCAsync(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata only from the specified stream provider asynchronously in metadata.
        /// This is a reduced load mode and it will only be possible to access the <see cref = "IDLCMetadata"/> for the DLC and nothing more.
        /// Designed to be a quick operation for accessing metadata, but may take some time to complete depending upon DRM provider and availability.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC metadata will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataFrom(string)"/>.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<IDLCMetadata> LoadDLCMetadataAsync(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content from the specified stream provider asynchronously in metadata with assets mode.
        /// This is a reduced load mode and it will be possible to access extra metadata for assets and scenes, but it will not be possible to load any asset or scene content into the game.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataWithAssetsFrom(string)"/>.
        /// </summary>
        /// <param name = "streamProvider">The stream provider for the DLC content</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentNullException">The stream provider is null</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCMetadataWithAssetsAsync(DLCStreamProvider streamProvider) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified name and optional version asynchronously.
        /// If the target DLC is already being loaded or has been loaded, this method will simply return the current load operation or a completed operation with the already loaded <see cref = "DLCContent"/>.
        /// This method is slow (and available as async only) since all available DLC need to be evaluated at the metadata level in order to find a matching name and version before loading can begin. Use <see cref = "LoadDLCAsync(string, bool)"/> for quicker load times
        /// The available DLC that will be scanned is determined from the active DRM provider via <see cref = "RemoteDLCUniqueKeysAsync"/>.
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCFromAsync(string)"/>.
        /// </summary>
        /// <param name = "dlcName">The name of the DLC to load. This is the friendly name assigned at build time and not the unique key</param>
        /// <param name = "version">An optional version if you need to load the specific version of a DLC</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The DLC name is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCNameAsync(string dlcName, Version version = null, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata only with the specified name and optional version asynchronously.
        /// This is a reduced load mode and it will only be possible to access the <see cref = "IDLCMetadata"/> for the DLC and nothing more.
        /// Designed to be a quick operation for accessing metadata, but may take some time to complete depending upon DRM provider and availability.
        /// Use <see cref = "LoadDLCNameAsync(string, Version, bool)"/> if you need to load assets from the DLC.
        /// This method is slow (and available as async only) since all available DLC need to be evaluated at the metadata level in order to find a matching name and version before loading can begin. Use <see cref = "LoadDLCMetadataAsync(string, bool)"/> for quicker load times
        /// The available DLC that will be scanned is determined from the active DRM provider via <see cref = "RemoteDLCUniqueKeysAsync"/>.
        /// The DLC metadata will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataFrom(string)"/>.
        /// </summary>
        /// <param name = "dlcName">The name of the DLC to load. This is the friendly name assigned at build time and not the unique key</param>
        /// <param name = "version">An optional version if you need to load the specific version of a DLC</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The DLC name is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<IDLCMetadata> LoadDLCNameMetadataAsync(string dlcName, Version version = null, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified name and optional version asynchronously in metadata with assets mode.
        /// This is a reduced load mode and it will be possible to access extra metadata for assets and scenes, but it will not be possible to load any asset or scene content into the game.
        /// Use <see cref = "LoadDLCNameAsync(string, bool)"/> if you need to load assets from the DLC.
        /// This method is slow (and available as async only) since all available DLC need to be evaluated at the metadata level in order to find a matching name and version before loading can begin. Use <see cref = "LoadDLCMetadataAsync(string, bool)"/> for quicker load times
        /// The available DLC that will be scanned is determined from the active DRM provider via <see cref = "RemoteDLCUniqueKeysAsync"/>.
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataWithAssetsFrom(string)"/>.
        /// </summary>
        /// <param name = "dlcName">The name of the DLC to load. This is the friendly name assigned at build time and not the unique key</param>
        /// <param name = "version">An optional version if you need to load the specific version of a DLC</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The DLC name is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCNameMetadataWithAssetsAsync(string dlcName, Version version = null, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key asynchronously.
        /// If the target DLC is already being loaded or has been loaded, this method will simply return the current load operation or a completed operation with the already loaded <see cref = "DLCContent"/>.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCFromAsync(string)"/>.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCAsync(string uniqueKey, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata only with the specified unique key asynchronously in metadata with assets mode.
        /// This is a reduced load mode and it will only be possible to access the <see cref = "IDLCMetadata"/> for the DLC and nothing more.
        /// Designed to be a quick operation for accessing metadata, but may take some time to complete depending upon DRM provider and availability.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC metadata will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataFrom(string)"/>.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<IDLCMetadata> LoadDLCMetadataAsync(string uniqueKey, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content with the specified unique key asynchronously in metadata with assets mode.
        /// This is a reduced load mode and it will be possible to access extra metadata for assets and scenes, but it will not be possible to load any asset or scene content into the game.
        /// Use <see cref = "LoadDLCAsync(string, bool)"/> if you need to load assets from the DLC.
        /// Note that the unique key can be different between platforms and you should check the DLC profile to ensure that the correct key is used for the current platform. 
        /// Alternatively you may be able to query <see cref = "IDRMProvider.DLCUniqueKeys"/> to enumerate all available DLC's, but note that some DRM providers may not implement that property or only partially implement it (May not return all possible DLC's).
        /// The DLC will be loaded on the background thread so it is possible to continue with gameplay or show an animated loading screen.
        /// The DLC will need to be available (Owned and installed, or owned with <paramref name = "installOnDemand"/> enabled) from the current DRM provider in order to succeed.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// Note that a DRM provider is required for the current platform, otherwise you should use <see cref = "LoadDLCMetadataWithAssetsFrom(string)"/>.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC content</param>
        /// <param name = "installOnDemand">Should the DLC be installed if it is owned by the used but not available locally. Only available in async mode</param>
        /// <returns>A <see cref = "DLCContent"/> containing the loaded DLC or null if the DLC could not be loaded</returns>
        /// <exception cref = "ArgumentException">The unique key is null or empty</exception>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCMetadataWithAssetsAsync(string uniqueKey, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC content from the specified file path asynchronously.
        /// The DLC will be loaded into memory and data may be preloaded according to the preload options set at build time.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "DLCAsync"/> operation that can be awaited and provides access to the loaded DLC</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCFromAsync(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata only from the specified file path asynchronously.
        /// Intended to be very quick access and will only load the absolute minimum amount of data required to access the meta information for the DLC.
        /// Only the DLC metadata will be loaded into memory.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "DLCAsync"/> operation that can be awaited and provides access to the DLC metadata</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<IDLCMetadata> LoadDLCMetadataFromAsync(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to load DLC metadata with assets only from the specified file path asynchronously.
        /// Intended to be very quick access and will only load the absolute minimum amount of data required to access the meta information for the DLC.
        /// Only the DLC metadata and asset metadata will be loaded into memory (Assets, scenes and scripts will not be loadable).
        /// <see cref = "DLCContent.SharedAssets"/> and <see cref = "DLCContent.SceneAssets"/> will be accessible after successful load to discover meta information only about included assets.
        /// </summary>
        /// <param name = "path">The file path containing the DLC content</param>
        /// <returns>A <see cref = "DLCAsync"/> operation that can be awaited and provides access to the loaded DLC</returns>
        /// <exception cref = "ArgumentException">The path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<DLCContent> LoadDLCMetadataWithAssetsFromAsync(string path) => throw new System.NotImplementedException();
        // ### Unload
        /// <summary>
        /// Attempt to unload all the current loaded DLC contents.
        /// </summary>
        /// <param name = "withAssets">Should asset instances also be unloaded</param>
        /// <exception cref = "ArgumentNullException"><paramref name = "dlcContents"/> is null or empty</exception>
        public static void UnloadAllDLC(bool withAssets = true) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to unload all the current loaded DLC contents asynchronously.
        /// </summary>
        /// <param name = "withAssets">Should asset instances also be unloaded</param>
        /// <returns>A <see cref = "DLCBatchAsync"/> object that can be awaited and provided additional information about the state of the batch operation</returns>
        /// <exception cref = "ArgumentNullException"><paramref name = "dlcContents"/> is null or empty</exception>
        public static DLCBatchAsync UnloadAllDLCAsync(bool withAssets = true) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to unload all the specified DLC contents.
        /// Each DLC will only be unloaded if it is currently fully loaded into memory.
        /// Loading or idle contents will simply be ignored.
        /// </summary>
        /// <param name = "dlcContents">An enumerable of <see cref = "DLCContent"/> that should be unloaded</param>
        /// <param name = "withAssets">Should asset instances also be unloaded</param>
        /// <exception cref = "ArgumentNullException"><paramref name = "dlcContents"/> is null or empty</exception>
        public static void UnloadDLCBatch(IEnumerable<DLCContent> dlcContents, bool withAssets = true) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to unload all the specified DLC contents asynchronously.
        /// Each DLC will only be unloaded if it is currently fully loaded into memory.
        /// Loading or idle contents will simply be ignored.
        /// </summary>
        /// <param name = "dlcContents">An enumerable of <see cref = "DLCContent"/> that should be unloaded</param>
        /// <param name = "withAssets">Should asset instances also be unloaded</param>
        /// <returns>A <see cref = "DLCBatchAsync"/> object that can be awaited and provided additional information about the state of the batch operation</returns>
        /// <exception cref = "ArgumentNullException"><paramref name = "dlcContents"/> is null or empty</exception>
        public static DLCBatchAsync UnloadDLCBatchAsync(IEnumerable<DLCContent> dlcContents, bool withAssets = true) => throw new System.NotImplementedException();
        /// <summary>
        /// Attempt to fetch the unique key for the DLC with the specified name and optional version.
        /// This method is slow (and available as async only) since all available DLC need to be evaluated at the metadata level in order to find a matching name and version.
        /// The available DLC that will be scanned is determined from the active DRM provider via <see cref = "RemoteDLCUniqueKeysAsync"/>.
        /// </summary>
        /// <param name = "dlcName">The name of the dlc to find the unique key for</param>
        /// <param name = "version">An optional version if a specific version of the DLC is required</param>
        /// <returns>A <see cref = "DLCAsync"/> operation that can be awaited and provides access to the unique key of the installed DLC with the specified name and optional version info if a match is found, or a null string if te DLC could not be located</returns>
        /// <exception cref = "NotSupportedException">There is no suitable DRM provider for this platform</exception>
        /// <exception cref = "DirectoryNotFoundException">Part of the file path could not be found</exception>
        /// <exception cref = "FileNotFoundException">The specified file path does not exist</exception>
        /// <exception cref = "FormatException">The specified file is not a valid DLC format</exception>
        /// <exception cref = "InvalidDataException">The specified file has been signed by another game or version - The DLC does not belong to this game</exception>
        /// <exception cref = "InvalidOperationException">The DLC file is missing required data or is possibly corrupt</exception>
        public static DLCAsync<string> GetDLCUniqueKeyAsync(string dlcName, Version version = null, bool installOnDemand = false) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if the specified file path is a valid DLC file format.
        /// This is intended to be a very quick check and will only load a few bytes from the source file in order to determine validity.
        /// </summary>
        /// <param name = "path">The path of the file to check</param>
        /// <returns>True if the file is a valid DLC format which can be loaded, or false if not</returns>
        public static bool IsDLCFile(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Register a custom <see cref = "IDRMServiceProvider"/> which is responsible for providing the correct DRM management for the current build configuration.
        /// </summary>
        /// <param name = "serviceProvider">The custom service provider or null, in which case the default DRM service provider will be used</param>
        public static void RegisterDRMServiceProvider(IDRMServiceProvider serviceProvider) => throw new System.NotImplementedException();
    }
}