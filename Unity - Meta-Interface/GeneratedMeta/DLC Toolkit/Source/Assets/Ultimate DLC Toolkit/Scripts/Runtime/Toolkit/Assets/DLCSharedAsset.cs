/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/Assets/DLCSharedAsset.cs
/// </summary>
using DLCToolkit.Format;
using System;
using System.Collections;
using UnityEngine;
using Object = UnityEngine.Object;

namespace DLCToolkit.Assets
{
    /// <summary>
    /// Represents a shared asset included in the DLC.
    /// Shared assets are content assets such as prefabs, textures, materials, audio clips, scriptable objects and more.
    /// </summary>
    public sealed class DLCSharedAsset : DLCAsset
    {
        // Constructor
        internal DLCSharedAsset(IDLCAsyncProvider asyncProvider, DLCContentBundle contentBundle, DLCLoadMode loadMode, int assetID, Type type, string fullName, string relativeName): base(default, default, default, default, default, default, default) => throw new System.NotImplementedException();
        // Methods
        ///<summary>
        /// Attempts to load this asset from the dlc.
        /// </summary>
        /// <returns>The loaded asset</returns>
        public Object Load() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset from the dlc as the specified generic type. 
        /// </summary>
        /// <typeparam name = "T">The generic type to load the asset as</typeparam>
        /// <returns>The loaded asset as the generic type</returns>
        public T Load<T>()
            where T : Object => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset with all associated sub assets. 
        /// </summary>
        /// <returns>An array of sub assets for this asset</returns>
        public Object[] LoadWithSubAssets() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset with all associated sub assets. 
        /// This overload will only return assets that are of the specified generic type such as 'Mesh'.
        /// </summary>
        /// <typeparam name = "T">The generic asset type to return</typeparam>
        /// <returns>An array of sub assets for this asset</returns>
        public T[] LoadWithSubAssets<T>()
            where T : Object => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset from the dlc asynchronously. 
        /// This method returns a <see cref = "DLCAsync"/> object which is yieldable and contains information about the loading progress and status. 
        /// </summary>
        /// <returns>A yieldable <see cref = "DLCAsync"/> object</returns>
        public DLCAsync<Object> LoadAsync() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset from the dlc asynchronously. 
        /// This method returns a <see cref = "DLCAsync"/> object which is yieldable and contains information about the loading progress and status. 
        /// </summary>
        /// <typeparam name = "T">The generic type to load the asset as</typeparam>
        /// <returns>A yieldable <see cref = "DLCAsync"/> object</returns>
        public DLCAsync<T> LoadAsync<T>()
            where T : Object => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset with all associated sub assets from the dlc asynchronously.
        /// This method returns a <see cref = "DLCAsync"/> object which is yieldable and contains information about the loading progress and status. 
        /// </summary>
        /// <returns>A yieldable <see cref = "DLCAsync"/> object</returns>
        public DLCAsync<Object[]> LoadWithSubAssetsAsync() => throw new System.NotImplementedException();
        /// <summary>
        /// Attempts to load this asset with all associated sub assets from the dlc asynchronously.
        /// This method returns a <see cref = "DLCAsync"/> object which is yieldable and contains information about the loading progress and status. 
        /// </summary>
        /// <typeparam name = "T">The generic asset type used to specify which sub asset types to load</typeparam>
        /// <returns>A yieldable <see cref = "DLCAsync"/> object</returns>
        public DLCAsync<T[]> LoadWithSubAssetsAsync<T>()
            where T : Object => throw new System.NotImplementedException();
    }
}