/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/DLCDirectory.cs
/// </summary>
using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEngine.Events;

namespace DLCToolkit
{
    /// <summary>
    /// A utility class for mounting a specific folder path as a designated DLC install folder.
    /// Contains useful helper methods to find and access the DLC contents included in the target folder.
    /// Note that only valid DLC files/information will be returned using this API (<see cref = "DLC.IsDLCFile(string)"/> = true), even if the folder contains additional non-DLC files.
    /// There is also support for detecting when DLC files are added or removed from the target folder.
    /// </summary>
    public sealed class DLCDirectory
    {
        // Events
        /// <summary>
        /// Called when a valid DLC format was installed in this directory.
        /// Note that events will only be called when `raiseFileEvents` is enabled in the constructor.
        /// </summary>
        public UnityEvent<string> OnDLCFileAdded;
        /// <summary>
        /// Called when a valid DLC format was uninstalled from this directory.
        /// Note that events will only be called when `raiseFileEvents` is enabled in the constructor.
        /// </summary>
        public UnityEvent<string> OnDLCFileDeleted;
        // Properties
        /// <summary>
        /// Get the total number of valid DLC files installed in this directory.
        /// </summary>
        public int DLCCount
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        /// <summary>
        /// Create new instance for the target directory.
        /// Note that the specified folder path must already exist or an exception will be thrown.
        /// </summary>
        /// <param name = "dlcDirectoryPath">The directory path where DLC files may be installed</param>
        /// <param name = "option">The search option to use when scanning for DLC content</param>
        /// <param name = "extension">An optional extension for DLC content to narrow the search</param>
        /// <param name = "raiseFileEvents">Should the directory trigger events when DLC files are added and removed</param>
        /// <exception cref = "ArgumentException">The specified path is null or empty</exception>
        /// <exception cref = "DirectoryNotFoundException">The specified directory does not exist</exception>
        /// <exception cref = "NotSupportedException">DLC directory is not supported on the current platform</exception>
        public DLCDirectory(string dlcDirectoryPath, SearchOption option = SearchOption.TopDirectoryOnly, string extension = null, bool raiseFileEvents = false) => throw new System.NotImplementedException();
        // Methods
        /// <summary>
        /// Check if a valid DLC with the specified name and optional version is installed in this directory.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>True if the DLC is installed or false if not</returns>
        public bool HasDLC(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if a valid DLC with the specified unique ey is installed in this directory.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>True if the DLC is installed or false if not</returns>
        public bool HasDLC(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Get file paths for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An array of file paths for all installed DLC content</returns>
        public string[] GetDLCFiles(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate file paths for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An enumerable for all installed DLC files</returns>
        public IEnumerable<string> EnumerateDLCFiles(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Get the metadata for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An array of metadata for all installed DLC content</returns>
        public IDLCMetadata[] GetAllDLC(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate the metadata for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An enumerable for all installed DLC metadata</returns>
        public IEnumerable<IDLCMetadata> EnumerateAllDLC(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Get the unique keys for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An array of unique keys for all installed DLC content</returns>
        public string[] GetDLCUniqueKeys(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate the unique keys for all valid installed DLC content.
        /// </summary>
        /// <param name = "searchName">An optional search name to narrow the search</param>
        /// <returns>An enumerable for all installed DLC unique keys</returns>
        public IEnumerable<string> EnumerateDLCUniqueKeys(string searchName = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the file path for the DLC with the specified name and optional version.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>The file path for the DLC if found or null if the DLC is not installed</returns>
        public string GetDLCFile(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the file path for the DLC with the specified unique key.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>The file path for the DLC if found or null if the DLC is not installed</returns>
        public string GetDLCFile(string uniqueKey) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the metadata for the DLC with the specified name and optional version.
        /// </summary>
        /// <param name = "name">The name of the DLC</param>
        /// <param name = "version">The optional version of the DLC if an explicit match is required</param>
        /// <returns>The metadata for the DLC if found or null if the DLC is not installed</returns>
        public IDLCMetadata GetDLC(string name, Version version = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to get the metadata for the DLC with the specified unique key.
        /// </summary>
        /// <param name = "uniqueKey">The unique key for the DLC</param>
        /// <returns>The metadata for the DLC if found or null if the DLC is not installed</returns>
        public IDLCMetadata GetDLC(string uniqueKey) => throw new System.NotImplementedException();
    }
}