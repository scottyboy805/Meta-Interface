/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/Assets/DLCAssetCollection.cs
/// </summary>
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

namespace DLCToolkit.Assets
{
    /// <summary>
    /// Represents a collection of <see cref = "DLCAsset"/> which are stored in a given DLC.
    /// Note that this collection can contain either shared assets or scene assets, but they will not be stored together.
    /// <see cref = "DLCContent.SharedAssets"/> provides access to all shared assets for the DLC, and <see cref = "DLCContent.SceneAssets"/> provides access to all scene assets.
    /// </summary>
    /// <typeparam name = "T">The generic type of <see cref = "DLCAsset"/> to store in this collection</typeparam>
    public sealed class DLCAssetCollection<T> : IEnumerable<T> where T : DLCAsset
    {
        // Properties
        /// <summary>
        /// Get the total number of shared assets that are available in this DLC.
        /// </summary>
        public int AssetCount
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        internal DLCAssetCollection(T[] assets) => throw new System.NotImplementedException();
        // Methods
        /// <summary>
        /// Check if an asset with the specified name or path exists in the DLC.
        /// </summary>
        /// <param name = "nameOfPath">The asset name or path</param>
        /// <returns>True if the asset exists or false if not</returns>
        public bool Exists(string nameOfPath) => throw new System.NotImplementedException();
        /// <summary>
        /// Check if an asset with the specified id exists in the DLC.
        /// </summary>
        /// <param name = "assetID">The asset ID to check</param>
        /// <returns>True if the asset exists or false if not</returns>
        public bool Exists(int assetID) => throw new System.NotImplementedException();
        /// <summary>
        /// Find the names of all assets that are available in this DLC.
        /// </summary>
        /// <returns>An array of asset names or an empty array if no assets are available</returns>
        public string[] FindAllNames() => throw new System.NotImplementedException();
        /// <summary>
        /// Find the relative names of all assets that are available in this DLC.
        /// The relative name is the asset path relative to the DLC content folder.
        /// </summary>
        /// <returns>An array of asset relative names or an empty array if no assets are available</returns>
        public string[] FindAllRelativeNames() => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC.
        /// </summary>
        /// <returns>An array of assets or an empty array if no assets are available</returns>
        public T[] FindAll() => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC of the specified type.
        /// Note that this will check for type equality and not sub types. Use <see cref = "FindAllSubTypesOf(Type)"/> if you want to discover derived types too.
        /// </summary>
        /// <param name = "type">The type of asset to find, for example: <see cref = "Texture2D"/></param>
        /// <returns>An array of assets matching the specified type or an empty array if no matching assets are available</returns>
        public T[] FindAllOfType(Type type) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC of the specified generic type.
        /// Note that this will check for type equality and not sub types. Use <see cref = "FindAllSubTypesOf{TType}()"/> if you want to discover derived types too.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find, for example: <see cref = "Texture2D"/></typeparam>
        /// <returns>An array of assets matching the specified generic type or an empty array if no matching assets are available</returns>
        public T[] FindAllOfType<TType>() => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC with are of the specified type, or derived from the specified type.
        /// Supports discovering derived types, for example: Searching for <see cref = "Texture"/> type will also return derived <see cref = "Texture2D"/> types.
        /// </summary>
        /// <param name = "type">The type of asset or derived asset to find</param>
        /// <returns>An array of assets matching or derived from the specified type or an empty array if no matching assets are available</returns>
        public T[] FindAllSubTypesOf(Type type) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC with are of the specified generic type, or derived from the specified generic type.
        /// Supports discovering derived types, for example: Searching for <see cref = "Texture"/> type will also return derived <see cref = "Texture2D"/> types.
        /// </summary>
        /// <typeparam name = "TType">The type of asset or derived asset to find</typeparam>
        /// <returns>An array of assets matching or derived from the specified generic type or an empty array if no matching assets are available</returns>
        public T[] FindAllSubTypesOf<TType>() => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC with the specified name.
        /// Note that this method may return multiple results with the same name if they are located in different folders.
        /// </summary>
        /// <param name = "name">The name of asset to find</param>
        /// <returns>An array of matching assets or an empty array if no matches are available</returns>
        /// <exception cref = "ArgumentException">The specified name was null or empty</exception>
        public T[] FindAllWithName(string name) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC with the specified file extension.
        /// </summary>
        /// <param name = "extension">The file extension to find</param>
        /// <returns>An array of matching assets or an empty array if no matches are available</returns>
        /// <exception cref = "ArgumentException">The Specified extension was null or empty</exception>
        /// <exception cref = "ArgumentException">The specified extension was incorrectly formatted and did not start with a leading '.' character</exception>
        public T[] FindAllWithExtension(string extension) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC and are located in the specified folder.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An array of assets that are in the specified folder or an empty array if no matches were found</returns>
        public T[] FindAllInFolder(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC and are located in the specified folder and are of the specified type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// Note that this will check for type equality and will not discover derived types. If you want to find derived types in addition, you should use <see cref = "FindAllSubTypesOfInFolder(Type, string)"/>.
        /// </summary>
        /// <param name = "type">The type of asset to find</param>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An array of assets of the specified type that are located in the specified folder or an empty array if no matches were found</returns>
        public T[] FindAllOfTypeInFolder(Type type, string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC and are located in the specified folder and are of the specified generic type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// Note that this will check for type equality and will not discover derived types. If you want to find derived types in addition, you should use <see cref = "FindAllSubTypesOfInFolder{TType}(string)"/>.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find</typeparam>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An array of assets of the specified generic type that are located in the specified folder or an empty array if no matches were found</returns>
        public T[] FindAllOfTypeInFolder<TType>(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC and are located in the specified folder and are of the specified type or derived from the specified type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "type">The type of asset to find</param>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An array of assets of the specified type or derived from the specified type that are located in the specified folder or an empty array if no matches were found</returns>
        public T[] FindAllSubTypesOfInFolder(Type type, string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are available in this DLC and are located in the specified folder and are of the specified generic type or derived from the specified generic type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find</typeparam>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An array of assets of the specified generic type or derived from the specified generic type that are located in the specified folder or an empty array if no matches were found</returns>
        public T[] FindAllSubTypesOfInFolder<TType>(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Find all assets that are located in the specified folder and has the specified file extension.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "path">The folder path to search in</param>
        /// <param name = "extension">The file extension to find</param>
        /// <returns>An array of assets in the specified folder with the specified extension or an empty array if no matches were found</returns>
        /// <exception cref = "ArgumentException">The Specified extension was null or empty</exception>
        /// <exception cref = "ArgumentException">The specified extension was incorrectly formatted and did not start with a leading '.' character</exception>
        public T[] FindAllInFolderWithExtension(string path, string extension) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate the names of all assets that are available in this DLC.
        /// </summary>
        /// <returns>An enumerable of asset names</returns>
        public IEnumerable<string> EnumerateAllNames() => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate the relative names of all assets that are available in this DLC.
        /// The relative name is the asset path relative to the DLC content folder.
        /// </summary>
        /// <returns>An enumerable of asset relative names</returns>
        public IEnumerable<string> EnumerateAllRelativeNames() => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC.
        /// </summary>
        /// <returns>An enumerable of assets</returns>
        public IEnumerable<T> EnumerateAll() => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in ths DLC of the specified type.
        /// Note that this will check for type equality and not sub types. Use <see cref = "EnumerateAllSubTypesOf(Type)"/> if you want to discover derived types too.
        /// </summary>
        /// <param name = "type">The type of asset to find, for example: <see cref = "Texture2D"/></param>
        /// <returns>An enumerable of assets of the specified type</returns>
        public IEnumerable<T> EnumerateAllOfType(Type type) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in ths DLC of the specified generic type.
        /// Note that this will check for type equality and not sub types. Use <see cref = "EnumerateAllSubTypesOf{TType}()"/> if you want to discover derived types too.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find, for example: <see cref = "Texture2D"/></typeparam>
        /// <returns>An enumerable of assets of the specified generic type</returns>
        public IEnumerable<T> EnumerateAllOfType<TType>() => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC which are of the specified type, or derived from the specified type.
        /// Supports discovering derived types, for example: Searching for <see cref = "Texture"/> type will also return derived <see cref = "Texture2D"/> types.
        /// </summary>
        /// <param name = "type">The type of asset or derived asset to find</param>
        /// <returns>An enumerable of assets matching or derived from the specified type</returns>
        public IEnumerable<T> EnumerateAllSubTypesOf(Type type) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC which are of the specified type, or derived from the specified generic type.
        /// Supports discovering derived types, for example: Searching for <see cref = "Texture"/> type will also return derived <see cref = "Texture2D"/> types.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset or derived asset to find</typeparam>
        /// <returns>An enumerable of assets matching or derived from the specified generic type</returns>
        public IEnumerable<T> EnumerateAllSubTypesOf<TType>() => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC with the specified name.
        /// Note that this method may return multiple results with the same name if they are located in different folders.
        /// </summary>
        /// <param name = "name">The name of the asset to find</param>
        /// <returns>An enumerable of assets with the specified name</returns>
        /// <exception cref = "ArgumentException">The specified name was null or empty</exception>
        public IEnumerable<T> EnumerateAllWithName(string name) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC with the specified file extension.
        /// </summary>
        /// <param name = "extension">The file extension to find</param>
        /// <returns>An enumerable of assets with the specified extension</returns>
        /// <exception cref = "ArgumentException">The Specified extension was null or empty</exception>
        /// <exception cref = "ArgumentException">The specified extension was incorrectly formatted and did not start with a leading '.' character</exception>
        public IEnumerable<T> EnumerateAllWithExtension(string extension) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC and are located in the specified folder.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An enumerable of assets that are in the specified folder</returns>
        public IEnumerable<T> EnumerateAllInFolder(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC and are located in the specified folder and are of the specified type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// Note that this will check for type equality and will not discover derived types. If you want to find derived types in addition, you should use <see cref = "EnumerateAllSubTypesOfInFolder(Type, string)"/>.
        /// </summary>
        /// <param name = "type">The type of asset to find</param>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An enumerable of assets of the specified type that are located in the specified folder</returns>
        public IEnumerable<T> EnumerateAllOfTypeInFolder(Type type, string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC and are located in the specified folder and are of the specified generic type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// Note that this will check for type equality and will not discover derived types. If you want to find derived types in addition, you should use <see cref = "EnumerateAllOfTypeInFolder{TType}(string)"/>.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find</typeparam>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An enumerable of assets of the specified generic type that are located in the specified folder</returns>
        public IEnumerable<T> EnumerateAllOfTypeInFolder<TType>(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC and are located in the specified folder and are of the specified type or derived from the specified type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "type">The type of asset to find</param>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An enumerable of assets of the specified type or derived from the specified type that are located in the specified folder</returns>
        public IEnumerable<T> EnumerateAllSubTypesOfInFolder(Type type, string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are available in this DLC and are located in the specified folder and are of the specified type or derived from the specified generic type.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <typeparam name = "TType">The generic type of asset to find</typeparam>
        /// <param name = "path">The folder path to search in</param>
        /// <returns>An enumerable of assets of the specified generic type or derived from the specified type that are located in the specified folder</returns>
        public IEnumerable<T> EnumerateAllSubTypesOfInFolder<TType>(string path) => throw new System.NotImplementedException();
        /// <summary>
        /// Enumerate all assets that are located in ths specified folder and has the specified file extension.
        /// The folder path should either be relative to the DLC content folder, or relative to the Unity assets folder.
        /// </summary>
        /// <param name = "path">The folder path to search in</param>
        /// <param name = "extension">The file extension to find</param>
        /// <returns>An enumerable of assets in the specified folder with the specified extension</returns>
        /// <exception cref = "ArgumentException">The Specified extension was null or empty</exception>
        /// <exception cref = "ArgumentException">The specified extension was incorrectly formatted and did not start with a leading '.' character</exception>
        public IEnumerable<T> EnumerateAllInFolderWithExtension(string path, string extension) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to find the asset with the specified name or path.
        /// Note that if searching by name and multiple assets with the same name exist in the DLC, this method will return the first asset found during the search.
        /// </summary>
        /// <param name = "nameOrPath">The name or path of the asset</param>
        /// <returns>An asset if found or null</returns>
        /// <exception cref = "ArgumentException">The nameOrPath is null or empty</exception>
        public T Find(string nameOrPath) => throw new System.NotImplementedException();
        /// <summary>
        /// Try to find the asset with the specified asset ID.
        /// </summary>
        /// <param name = "assetID">The id of the asset</param>
        /// <returns>An asset if found or null if not</returns>
        public T Find(int assetID) => throw new System.NotImplementedException();
        IEnumerator<T> IEnumerable<T>.GetEnumerator() => throw new System.NotImplementedException();
        IEnumerator IEnumerable.GetEnumerator() => throw new System.NotImplementedException();
    }
}