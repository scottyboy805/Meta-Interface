/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/DLCStreamProvider.cs
/// </summary>
using DLCToolkit.Format.IO;
using System;
using System.Collections.Generic;
using System.IO;

namespace DLCToolkit
{
    /// <summary>
    /// Represents a data stream source containing DLC content.
    /// </summary>
    public abstract class DLCStreamProvider : IDisposable
    {
        // Properties
        /// <summary>
        /// Does the stream provider support multiple simultaneous open read streams.
        /// Can improve performance if enabled but each opened stream must have a unique stream/file handle to avoid seek read issues.
        /// </summary>
        public abstract bool SupportsMultipleStreams
        {
            get;
        }

        /// <summary>
        /// Get the path where the DLC content was sourced from.
        /// </summary>
        public abstract string HintPath
        {
            get;
        }

        // Methods
        /// <summary>
        /// Try to open the DLC content stream for reading.
        /// </summary>
        /// <returns>An open readable stream that supports seeking</returns>
        public abstract Stream OpenReadStream();
        /// <summary>
        /// Try to open the DLC content stream for reading with the specified stream offset and size bounds.
        /// The returned streams position '0' must represent the given offset for example.
        /// </summary>
        /// <param name = "offset">The offset into the base stream</param>
        /// <param name = "size">The size of the data stream</param>
        /// <returns></returns>
        public abstract Stream OpenReadStream(long offset, long size);
        /// <summary>
        /// Dispose of any open streams used by this stream provider.
        /// </summary>
        public abstract void Dispose();
        /// <summary>
        /// Create a stream provider from the specified stream.
        /// Use <see cref = "FromData(byte[], string)"/> or <see cref = "FromFile(string)"/> where possible as both options support multiple simultaneous read calls for quicker loading.
        /// </summary>
        /// <param name = "stream">The stream to load the content from</param>
        /// <param name = "hintPath">An optional hint path describing where the stream content originated from</param>
        /// <returns>A stream provider that allows access to the DLC content via a standard API</returns>
        public static DLCStreamProvider FromStream(Stream stream, string hintPath = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a stream provider from the specified dlc file data.
        /// This is recommended over <see cref = "FromStream(Stream, string)"/> as it can support multiple simultaneous reads for quicker loading.
        /// </summary>
        /// <param name = "data">The data where the dlc content is stored</param>
        /// <param name = "hintPath">An optional hint path describing where the stream content originated from</param>
        /// <returns>A stream provider that allows access to the DLC content via a standard API</returns>
        public static DLCStreamProvider FromData(byte[] data, string hintPath = null) => throw new System.NotImplementedException();
        /// <summary>
        /// Create a stream provider from the specified file path.
        /// It is highly recommended to use this option where possible, as reading from file path can support multiple simultaneous read operations to offset quicker load times.
        /// </summary>
        /// <param name = "localDLCPath">The file path for the DLC content</param>
        /// <returns>A stream provider that allows access to the DLC content via a standard API</returns>
        public static DLCStreamProvider FromFile(string localDLCPath) => throw new System.NotImplementedException();
    }
}