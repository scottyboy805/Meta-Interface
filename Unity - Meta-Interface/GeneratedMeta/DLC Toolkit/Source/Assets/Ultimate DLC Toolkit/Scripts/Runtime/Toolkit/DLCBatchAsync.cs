/// <summary>
/// This source file was auto-generated by a tool - Any changes may be overwritten!
/// From Unity assembly definition: DLCToolkit.dll
/// From source file: Assets/Ultimate DLC Toolkit/Scripts/Runtime/Toolkit/DLCBatchAsync.cs
/// </summary>
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace DLCToolkit
{
    /// <summary>
    /// A batch async awaitable operation that contains multiple sub async operations.
    /// Can represent the progress and status of all operations combined and will wait until all operations have finished.
    /// Note that all sub operations will run in parallel in most cases, so a batch operation will only usually take as much time as the longest sub operation in most cases, plus some minor overhead for management.
    /// </summary>
    /// <typeparam name = "T">The generic type returned by each sub operation</typeparam>
    public sealed class DLCBatchAsync<T> : DLCAsync<T[]>
    {
        // Properties
        /// <summary>
        /// Get the total number of async operations in this batch.
        /// </summary>
        public int TotalCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the total number of async operations in this batch that have not yet completed.
        /// </summary>
        public int InProgressCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the total number of async operations in this batch that have completed with or without error.
        /// </summary>
        public int CompletedCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get access to each individual async task that is contained in this batch.
        /// Useful to access progress and status of a specific operation rather that using the total combined <see cref = "DLCAsync.Progress"/>.
        /// </summary>
        public IReadOnlyList<DLCAsync<T>> Tasks
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        internal DLCBatchAsync(IEnumerable<DLCAsync<T>> items) => throw new System.NotImplementedException();
        /// <summary>
        /// Called when this async operation can update.
        /// </summary>
        protected override void UpdateTasks() => throw new System.NotImplementedException();
    }

    /// <summary>
    /// A batch async awaitable operation that contains multiple sub async operations.
    /// Can represent the progress and status of all operations combined and will wait until all operations have finished.
    /// Note that all sub operations will run in parallel in most cases, so a batch operation will only usually take as much time as the longest sub operation in most cases, plus some minor overhead for management.
    /// </summary>
    /// <typeparam name = "T">The generic type returned by each sub operation</typeparam>
    public sealed class DLCBatchAsync : DLCAsync
    {
        // Properties
        /// <summary>
        /// Get the total number of async operations in this batch.
        /// </summary>
        public int TotalCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the total number of async operations in this batch that have not yet completed.
        /// </summary>
        public int InProgressCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get the total number of async operations in this batch that have completed with or without error.
        /// </summary>
        public int CompletedCount
        {
            get => throw new System.NotImplementedException();
        }

        /// <summary>
        /// Get access to each individual async task that is contained in this batch.
        /// Useful to access progress and status of a specific operation rather that using the total combined <see cref = "DLCAsync.Progress"/>.
        /// </summary>
        public IReadOnlyList<DLCAsync> Tasks
        {
            get => throw new System.NotImplementedException();
        }

        // Constructor
        internal DLCBatchAsync(IEnumerable<DLCAsync> items) => throw new System.NotImplementedException();
        /// <summary>
        /// Called when this async operation can update.
        /// </summary>
        protected override void UpdateTasks() => throw new System.NotImplementedException();
    }
}